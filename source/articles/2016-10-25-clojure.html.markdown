---
title: 5 things I like about clojure, and 3 that made us leave
date: 2016-10-25
tags:  Clojure, Programming, Ruby
author: mveytsman
published: true
layout: post
---
On October 11th, Appcanary relied on about 8,500 lines of clojure code. On the
12th we were down to zero. [Phill's](https://twitter.com/phillmv) going to
[talk](http://rubyconf.org/program#prop_19) about the process of rewriting a
production clojure application in Rails and what we learned from it. I want to
take this time to talk about what I liked about clojure, and some of the things
I didn't. 

I still love clojure as a language, and my gripes below aren't the sum total of
the reasons we left, although they contributed. The story of why we left will be
told later, for now, let's talk about the language

## What I like

### 1) The joy of Lisp

[![XKCD #297](http://imgs.xkcd.com/comics/lisp_cycles.png)](https://xkcd.com/297/)

There's something magical about writing lisp. Alan Kay called it the greatest
single programming language ever devised. Paul Graham called it a
[secret weapon](http://paulgraham.com/avg.html). You can find tens of thousands
of words on the elegant, mind-expanding powers of lisp[^bipolar]. I don't think
my version of the Lisp wizardry blog post would be particularly original or
unique, so if you want to know more about the agony and ecstasy of wielding
parenthesis, read Paul Graham.

What's great about clojure is that while ruby
[might be an acceptable lisp](http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/),
and lisp might
[not be an acceptable lisp](http://steve-yegge.blogspot.ca/2006/04/lisp-is-not-acceptable-lisp.html),
clojure is a more than acceptable lisp. If we avoid the minefield of type
systems, clojure address the other 4 problems Steve Yegge brings up
above[^hygenic].

### 2) Immutability

The core data structures in clojure are immutable. If I define `car` to be `"a dirty van"`,
nothing can ever change that. I can name some other thing `car` later, but
anything referencing that first `car` will always be referencing `"a dirty van"`.

This is great for a host of reasons. For one, you get pluralization for free &emdash;
since nothing will mutate your collection, mapping or reducing some function
over it can be hadooped out to as many clouds as you want without changing your
algorithms.

You also can reason about your code much better. There's a famous quote by Larry Wall:

> [Perl] would prefer that you stayed out of its living room because you weren't
> invited, not because it has a shotgun.

He was talking about private methods, but the same is true for mutability in most languages. You call some method and who knows if it mutated a value you were using? You would prefer it not to, but you have no shotgun, and frankly it's so easy to mutate state without even knowing that you are. Consider Python:

~~~python
str1 = "My name "
str2 = str1
str1 += "is Max"
print str1
# "My name is Max"
print str2
# "My name"

list1 = [1, 2, 3]
list2 = list1
list1 += [4, 5]
print list1
# [1, 2, 3, 4, 5]
print list2
# [1, 2, 3, 4, 5]
~~~

I have to actually remember whether `+=` will give me a new object or mutate the existing one depending on its type!

Not having the choice to mutate is as liberating as getting rid of your Facebook account.

### 3) Data first programming

Walking away from object-oriented languages is very freeing. 

I want to design a model for the game of poker. I start by listing the
nouns[^nouns]: "card", "deck", "hand", "player", "dealer", etc&hellip; Then I
think of the verbs, "deal", "bet", "fold", etc&hellip; Now what?
[Here's](http://stackoverflow.com/questions/19553838/oop-design-quesiton-with-a-card-game)
a typical StackOverflow question demonstrating the confusion that comes with
designing like this. Is the dealer a kind of player or a separate class? If
players have hands of cards, how does the deck keep track of what cards are
left? 

At the end of the day, the work of programming a poker game is codifying all of
the actual rules of the game, and these will end up in a `Game` singleton that
does most of the work anyway. 

If you start by thinking about data and the functions that operate on it,
there's a natural way to solve hard problems top-down, and you can iterate your
design quick (see below). You have some data structure that represents the game
state, a structure representing possible actions a player can take, and a
function to transform a game state and an action into the next game state. That
function encodes the actual rules of poker (defined in lots of smaller
function).

I find this style of programming very natural and satisfying. Of course you can
do this in any language, but I find clojure draws me towards it, while OO
languages push me away from it.


### 4) Unit Testing

The majority of your code is made up of pure functions. A pure function is one
which always gives the same output for a given input &emdash; doesn't that sound
easy to test? Instead of setting up test harnesses databases and mocks, you just
write tests for your functions.

Testing the edges of your code that talk to the outside world requires mocking
of course, and integration testing is never trivial, but the thing you want to
test most is some super-complicated piece of business logic deep in your
codebase. The business logic your business depends on, for instance computing
whether your version of OpenSSL is vulnerable to HeartBleed. Clojure pushes you
to make that bit of code a pure function that's testable without setting
up complicated state.

### 5) Refactoring

Here's a typical clojure function

~~~clojure
(defn foo [a b]
  ;; some code here
  (let [c (some-function a b)]
    ;; a ton of 
    ;; complicated code here
)))
~~~

In lisp-speak, a parenthesized block is called a "form". The `foo` form is the outer form, and it contains the `let` form, which ostensibly contains other forms that do complicated things.

I know that all the complicated code inside of the `let` form isn't going to
mutate any state, and it's only dependent `a` and `b`, which means that
refactoring this code out into it's own functions is as trivial as selecting
everything between two matching parentheses and cutting and pasting it out. If
you have an editor that supports paredit-style navigation of lisp forms, you can
rearrange code at lightning speed.


## Things I didn't like

### 1) Small libraries over big frameworks

In theory this is a great idea. You write programs by composing small functions,
so naturally you should be composing small libraries like puzzle pieces. This
doesn't work in practice.

I don't necessarily think that a monolithic framework like Rails is the answer
to all of the problems. It's not about wanting to write code that gets called by
a framework instead of code that calls out to libraries, it's about having the
set of functions I need to build a modern application that are guaranteed to be
tested maintained and interoperable. The appeal of Rails isn't that people are
craving to write models views and controllers, it's that it provides a robust
standard library for writing web applications Ruby -- one that you can use
outside of the Rails monolith. Go doesn't have a monolithic framework culture,
and Gophers prefer the small library way too, but they have the best standard
library in the industry at their fingertips.

Instead in Clojure I have to piece together a bunch of tiny libraries. Each one,
I have to evaluate to see if it's maintained enough to trust in production,
fight Maven dependency hell to get all of them to work even though they
have conflicting dependencies.

But what's that you say? Clojure's greatest strength is that it runs on the JVM,
why not just use a Java library?

### 2) Java

Oh. My. God. 

We let out a collective sigh of relief when we got off the JVM.

It's bloated. We had to eventually give 8gb to the process running Appcanary,
and only half that can be blamed on Datomic. Yes, I know, you can tune the hell
out of it, and eventually I could hire a JVM tuning expert to do this for me.
This is insane.

Maven hell. The dependency resolution glue I'm using to compose all the tiny
libraries together is non-deterministic. Did you
[know](http://librelist.com/browser//leiningen/2013/8/29/re-leiningen-order-dependency-of-dependencies/)
that Leinengen/Maven's dependency resolution depends on the order of
dependencies? Rearranging the order of your dependencies can change what version
of a library your code will get! 

And all those great Java libraries? Let me just say I had to try three different
HTTP client libraries before I could get something that could correctly handle
TLS with the SNI configuration of a domain that the standard library in
literally every other language I tried worked fine with.

[^bipolar]: My favourite essay of this ilk is Mark Tarver's melancholy
  [The Bipolar Lisp Programmer](http://www.shenlanguage.org/lambdassociates/htdocs/blog/bipolar.htm).
  He describes lisp as a language designed by and for brilliant failures. Back
  in university, I ate this shit up. My grades were obvious evidence of half the
  requirement of being a lisp programmer.

[^hygenic]: I'm aware that clojure's `gensym` does not a hygenic macro system
    make. But, if you have strong opinions on hygenic macros as they relate to
    acceptable lisps, this article might not be for you.

[^nouns]: For the record, I know that this isn't the "right" way to design OO
    programs, but the fact that I have to acknowledge this proves my point.
