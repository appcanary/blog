<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Appcanary</title>
  <subtitle>&lt;a href="https://appcanary.com"&gt;Appcanary&lt;/a&gt; makes sure you never run vulnerable software in your apps.&lt;br/&gt;Subscribe to our &lt;a href="https://appcanary.us10.list-manage.com/subscribe?u=303b378f377508300c0b5469a&amp;id=dc58e8f56f"&gt;newsletter&lt;/a&gt;!</subtitle>
  <id>http://blog.appcanary.com</id>
  <link href="http://blog.appcanary.com"/>
  <link href="http://blog.appcanary.com/feed.xml" rel="self"/>
  <updated>2016-11-06T19:00:00-05:00</updated>
  <entry>
    <title>We Left Clojure. Here's 5 Things I'll Miss.</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/missing-clojure.html"/>
    <id>http://blog.appcanary.com/2016/missing-clojure.html</id>
    <published>2016-11-06T19:00:00-05:00</published>
    <updated>2016-11-07T11:56:15-05:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;On October 11th, Appcanary relied on about 8,500 lines of clojure code. On the
12th we were down to zero. We replaced it by adding another 5,700 lines of Ruby to our codebase. 
&lt;a href="https://twitter.com/phillmv"&gt;Phill&lt;/a&gt; will be discussing why we left, and what we learned both here and &lt;a href="http://rubyconf.org/program#prop_19"&gt;at this year&amp;rsquo;s RubyConf&lt;/a&gt;. For now, I want to talk about what I&amp;rsquo;ll miss.&lt;/p&gt;

&lt;h3&gt;1) The joy of Lisp&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://xkcd.com/297/"&gt;&lt;img alt="XKCD #297" src="http://imgs.xkcd.com/comics/lisp_cycles.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s something magical about writing lisp. Alan Kay called it the greatest
single programming language ever devised. Paul Graham called it a
secret weapon. You can find tens of thousands
of words on the elegant, mind-expanding powers of lisp&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. I don&amp;rsquo;t think
my version of the Lisp wizardry blog post would be particularly original or
unique, so if you want to know more about the agony and ecstasy of wielding
parenthesis, read &lt;a href="http://paulgraham.com/avg.html"&gt;Paul Graham&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s great about Clojure is that while Ruby
&lt;a href="http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/"&gt;might be an acceptable lisp&lt;/a&gt;,
and lisp might
&lt;a href="http://steve-yegge.blogspot.ca/2006/04/lisp-is-not-acceptable-lisp.html"&gt;not be an acceptable lisp&lt;/a&gt;,
Clojure is a more than acceptable lisp. If we avoid the minefield of type
systems, Clojure addresses the other 4 problems Steve Yegge discusses in the previous link&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3&gt;2) Immutability&lt;/h3&gt;

&lt;p&gt;The core data structures in clojure are immutable. If I define &lt;code&gt;car&lt;/code&gt; to be &lt;code&gt;&amp;quot;a dirty van&amp;quot;&lt;/code&gt;,
nothing can ever change that. I can name some other thing &lt;code&gt;car&lt;/code&gt; later, but
anything referencing that first &lt;code&gt;car&lt;/code&gt; will always be referencing &lt;code&gt;&amp;quot;a dirty van&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is great for a host of reasons. For one, you get parallelization for free &amp;emdash;
since nothing will mutate your collection, mapping or reducing some function
over it can be hadooped out to as many clouds as you want without changing your
algorithms.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also much easier to can reason about your code. There&amp;rsquo;s a famous quote by Larry Wall:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Perl] would prefer that you stayed out of its living room because you weren&amp;rsquo;t
invited, not because it has a shotgun.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He was talking about private methods, but the same is true for mutability in most languages. You call some method and who knows if it mutated a value you were using? You would prefer it not to, but you have no shotgun, and frankly it&amp;rsquo;s so easy to mutate state without even knowing that you are. Consider Python:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My name "&lt;/span&gt;
&lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt;
&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"is Max"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt;
&lt;span class="c"&gt;# "My name is Max"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;
&lt;span class="c"&gt;# "My name"&lt;/span&gt;

&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;span class="c"&gt;# [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;
&lt;span class="c"&gt;# [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling &lt;code&gt;+=&lt;/code&gt; on a string returned a new one, while calling &lt;code&gt;+=&lt;/code&gt; on a list
mutated it in place! I have to remember which types are mutable, and whether
&lt;code&gt;+=&lt;/code&gt; will give me a new object or mutate the existing one depending on its type.
Who knows what might happen when you start passing your variables by reference
to somewhere else?&lt;/p&gt;

&lt;p&gt;Not having the choice to mutate state is as liberating as getting rid of your Facebook account.&lt;/p&gt;

&lt;h3&gt;3) Data first programming&lt;/h3&gt;

&lt;p&gt;Walking away from object-oriented languages is very freeing. &lt;/p&gt;

&lt;p&gt;I want to design a model for the game of poker. I start by listing the
nouns&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;: &amp;ldquo;card&amp;rdquo;, &amp;ldquo;deck&amp;rdquo;, &amp;ldquo;hand&amp;rdquo;, &amp;ldquo;player&amp;rdquo;, &amp;ldquo;dealer&amp;rdquo;, etc. Then I
think of the verbs, &amp;ldquo;deal&amp;rdquo;, &amp;ldquo;bet&amp;rdquo;, &amp;ldquo;fold&amp;rdquo;, etc. &lt;/p&gt;

&lt;p&gt;Now what?
&lt;a href="http://stackoverflow.com/questions/19553838/oop-design-quesiton-with-a-card-game"&gt;Here&amp;rsquo;s&lt;/a&gt;
a typical StackOverflow question demonstrating the confusion that comes with
designing like this. Is the dealer a kind of player or a separate class? If
players have hands of cards, how does the deck keep track of what cards are
left? &lt;/p&gt;

&lt;p&gt;At the end of the day, the work of programming a poker game is codifying all of
the actual rules of the game, and these will end up in a &lt;code&gt;Game&lt;/code&gt; singleton that
does most of the work anyway. &lt;/p&gt;

&lt;p&gt;If you start by thinking about data and the functions that operate on it,
there&amp;rsquo;s a natural way to solve hard problems from the top-down, which lets you quickly iterate your
design (see below). You have some data structure that represents the game
state, a structure representing possible actions a player can take, and a
function to transform a game state and an action into the next game state. That
function encodes the actual rules of poker (defined in lots of other, smaller
functions).&lt;/p&gt;

&lt;p&gt;I find this style of programming very natural and satisfying. Of course, you can
do this in any language; but I find Clojure draws me towards it, while OO
languages push me away from it.&lt;/p&gt;

&lt;h3&gt;4) Unit Testing&lt;/h3&gt;

&lt;p&gt;The majority of your code is made up of pure functions. A pure function is one
which always gives the same output for a given input &amp;emdash; doesn&amp;rsquo;t that sound
easy to test? Instead of setting up test harnesses databases and mocks, you just
write tests for your functions.&lt;/p&gt;

&lt;p&gt;Testing the edges of your code that talk to the outside world requires mocking,
of course, and integration testing is never trivial. But the first thing you want to
test is the super-complicated piece of business logic deep in your
codebase. The business logic your business depends on, like for instance computing
whether your version of OpenSSL is vulnerable to HeartBleed. &lt;/p&gt;

&lt;p&gt;Clojure pushes you
to make that bit of code a pure function that&amp;rsquo;s testable without setting
up complicated state.&lt;/p&gt;

&lt;h3&gt;5) Refactoring&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a typical clojure function&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;;; some code here
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;some-function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;;; a ton of 
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; complicated code here
&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In lisp-speak, a parenthesized block is called a &amp;ldquo;form&amp;rdquo;. The &lt;code&gt;foo&lt;/code&gt; form is the outer form, and it contains the &lt;code&gt;let&lt;/code&gt; form, which ostensibly contains other forms that do complicated things.&lt;/p&gt;

&lt;p&gt;I know that all the complicated code inside of the &lt;code&gt;let&lt;/code&gt; form isn&amp;rsquo;t going to
mutate any state, and that it&amp;rsquo;s only dependent on the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; variables. This means that
refactoring this code out into its own functions is as trivial as selecting
everything between two matching parentheses and cutting and pasting it out. If
you have an editor that supports paredit-style navigation of lisp forms, you can
rearrange code at lightning speed.&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;My favourite essay of this ilk is Mark Tarver&amp;rsquo;s melancholy
&lt;a href="http://www.shenlanguage.org/lambdassociates/htdocs/blog/bipolar.htm"&gt;The Bipolar Lisp Programmer&lt;/a&gt;.
He describes lisp as a language designed by and for brilliant failures. Back
in university, I ate this shit up. My grades were obvious evidence of half the
requirement of being a lisp programmer.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;I&amp;rsquo;m aware that clojure&amp;rsquo;s &lt;code&gt;gensym&lt;/code&gt; does not a hygenic macro system
make. But, if you have strong opinions on hygenic macros as they relate to
acceptable lisps, this article might not be for you.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;For the record, I know that this isn&amp;rsquo;t the &amp;ldquo;right&amp;rdquo; way to design OO
programs, but the fact that I have to acknowledge this proves my point.&amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>The Mirai Botnet is Proof the Security Industry is Broken</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/mirai-botnet-security-broken.html"/>
    <id>http://blog.appcanary.com/2016/mirai-botnet-security-broken.html</id>
    <published>2016-10-30T20:00:00-04:00</published>
    <updated>2016-11-01T09:23:18-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;Last Friday, my workday was rudely interrupted because I couldn&amp;rsquo;t access Github.
To add insult to injury I couldn&amp;rsquo;t even complain about it on Twitter. I tried to
drown my sorrows by listening to moody Leonard Cohen songs on Spotify, but
alas&amp;hellip;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ve probably heard of this. Huge tracts of the Internet were down because the DNS provider Dyn 
faced a massive Denial of Service attack from the
&lt;a href="https://krebsonsecurity.com/2016/10/hacked-cameras-dvrs-powered-todays-massive-internet-outage/"&gt;Mirai botnet&lt;/a&gt;, 
which takes advantage of Internet of Things devices like cameras and DVRs.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;ldquo;Oh &amp;amp; also, evil sorcerers crippled our divination network Friday by getting millions of coffee makers &amp;amp; lightswitches to shout real loud&amp;rdquo; &lt;a href="https://t.co/OPhdOJLwc1"&gt;https://t.co/OPhdOJLwc1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Max Gladstone (@maxgladstone) &lt;a href="https://twitter.com/maxgladstone/status/790890882543288320"&gt;October 25, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3&gt;So, what&amp;rsquo;s new about Mirai?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve written about
1988&amp;rsquo;s &lt;a href="https://blog.appcanary.com/2016/tale-of-two-worms.html"&gt;Morris worm&lt;/a&gt;, 
and I wanted to dig into the
&lt;a href="https://github.com/jgamblin/Mirai-Source-Code"&gt;source&lt;/a&gt; of the Mirai botnet
(helpfully published by the author) to see how far we&amp;rsquo;ve come along in the past
28 years.&lt;/p&gt;

&lt;p&gt;Can you guess how Mirai spreads? &lt;/p&gt;

&lt;p&gt;Was there new zeroday in the devices? Hey, maybe there was an old, unpatched
vulnerability hanging &amp;mdash; who has time to apply software updates to their toaster? 
Maybe it was HeartBleed 👻?&lt;/p&gt;

&lt;p&gt;Nope.&lt;/p&gt;

&lt;p&gt;Mirai does one, and only one thing in order to break into new devices: it cycles through a bunch of default
username/password combinations over telnet, like &amp;ldquo;admin/admin&amp;rdquo; and &amp;ldquo;root/realtek&amp;rdquo;. For a
laugh, &amp;ldquo;mother/fucker&amp;rdquo; is in there too.&lt;/p&gt;

&lt;p&gt;Default credentials. Over telnet. That&amp;rsquo;s how you get hundreds of thousands of
&lt;a href="http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/"&gt;devices&lt;/a&gt;.
The Morris worm from 1988 tried a dictionary password attack too, but only after
its buffer overflow and sendmail backdoor exploits failed. &lt;/p&gt;

&lt;p&gt;Oh, and Morris&amp;rsquo; password dictionary was larger, too.&lt;/p&gt;

&lt;h3&gt;How do we keep getting this wrong?&lt;/h3&gt;

&lt;p&gt;Around the world, we spend $75 billion a year on information security.
And for what, when we keep getting such basic things wrong? Suppose I waved a
magic wand and cut the worldwide security budget in half. Would things really be
that much worse? The security industry is addicted to selling expensive
complicated products instead of doing the basics well. &lt;/p&gt;

&lt;p&gt;I was at a security conference the other week, and there was yet another crop of
cyberapocalypse talks. The Internet of Things is a garbage fire. Industrial control
systems are going to get us all killed. Users are clicking phishing links like
sheep. We&amp;rsquo;re all doomed. And somehow, it&amp;rsquo;s always the fault of shitty
programmers or dumb users. Let&amp;rsquo;s all laugh at their fails.&lt;/p&gt;

&lt;h3&gt;It&amp;rsquo;s all bullshit.&lt;/h3&gt;

&lt;p&gt;We sell biometric authentication systems to people who need a good password
manager. We sell live threat attribution intelligence with colorful maps to
people who need to practice configuration management. We sell advanced
in-cpu sandbox endpoint protection to people who need to institute a patching program.
There&amp;rsquo;s a reason why security practitioners get such a kick out of
&lt;a href="https://threatbutt.com/"&gt;ThreatButt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are lots of real, important, conceptually difficult problems in
security. We don&amp;rsquo;t really know how to write secure code, and it&amp;rsquo;s all too
easy to get socially engineered. But, right now, the vast majority of threats can be thwarted by &lt;b&gt;the basics&lt;/b&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keep your systems patched&lt;/li&gt;
&lt;li&gt;Keep your systems properly configured.&lt;/li&gt;
&lt;li&gt;Make sure you have strong passwords and two factor authentication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do the basics first. The basics matter. Then you can focus on the Sisyphean
tasks that remain. Instead, here we are selling fancy bullshit and barely making
any progress in 28 years. Lots of money in it, though.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Paying the Bills&lt;/h4&gt;

&lt;p&gt;Surprise, I also sell a security product! But I will say this: Appcanary
isn&amp;rsquo;t going to protect you from shipping millions of internet-accessible
cameras with the same password. We won&amp;rsquo;t even protect you from having your DNS
provider DoSed.&lt;/p&gt;

&lt;p&gt;The major botnet of 2016 is &lt;em&gt;simpler&lt;/em&gt; than the botnet of 1988. There&amp;rsquo;s something
wrong in how we do security, and at Appcanary, we think it&amp;rsquo;s a complete lack of
focus on the basics. &lt;/p&gt;

&lt;p&gt;The highest value, easiest thing you can do to improve your security is patch
known vulnerabilities. Most breaches come from years-old vulnerabilities. &lt;/p&gt;

&lt;p&gt;Our product,
&lt;a href="https://appcanary.com/?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=broken"&gt;Appcanary&lt;/a&gt;,
monitors your apps and servers, and notifies you whenever a new vulnerability is
discovered in a package you rely on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/sign_up?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=broken"&gt;Sign up&lt;/a&gt; today!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A tale of two worms, three vulnerabilities, and one National Security Agency</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/tale-of-two-worms.html"/>
    <id>http://blog.appcanary.com/2016/tale-of-two-worms.html</id>
    <published>2016-08-23T20:00:00-04:00</published>
    <updated>2016-10-26T18:54:36-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;Paranoia is natural for security practitioners. &lt;/p&gt;

&lt;p&gt;Hacking can feel like being initiated into a secret society of wizards.
Once you&amp;rsquo;re in, you get access to an
&lt;a href="https://docs.google.com/presentation/d/1Sv8IHkBtBEXjSW7WktEYg4EbAUHtVyXIZBrAGD3WR5Y/edit?pref=2&amp;pli=1#slide=id.p" target="_blank"&gt;addictive drug&lt;/a&gt;
that gives you super powers. But there are other wizards out there; some are good
but many practice black magic. And the NSA&amp;rsquo;s school of the dark arts has a seemingly
unlimited budget. &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s natural to get a little paranoid. Experience shows you
that with the right incantation you can turn crashes into working exploits. It
follows that every time your computer crashes there could be someone in the
shadows, chanting the right incantation. The paranoia can be all-consuming;
just because you&amp;rsquo;re paranoid doesn&amp;rsquo;t mean they&amp;rsquo;re not &lt;a href="http://www.nytimes.com/2011/07/02/opinion/02hotchner.html?_r=0" target="_blank"&gt;out to get you&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In October 2013, a well known computer security expert named Dragos Ruiu came
out with a &lt;a href="http://arstechnica.com/security/2013/10/meet-badbios-the-mysterious-mac-and-pc-malware-that-jumps-airgaps/" target="_blank"&gt;story&lt;/a&gt;. He found that his computers had been behaving oddly, and that the symptoms he was seeing were impossible to eradicate. This was some kind of worm, since the behavior would
replicate across &lt;a href="https://en.wikipedia.org/wiki/Air_gap_(networking)" target="_blank"&gt;air gapped&lt;/a&gt; computers in his lab. He theorized that he
was infected with a super advanced piece of malware that lived in the BIOS and
could spread by sending ultrasonic frequencies from speaker to
microphone, undetectable to the human ear. It looked like
the work of the NSA or someone equally omnipotent. He dubbed it badBIOS. &lt;/p&gt;

&lt;p&gt;Everything Dragos claimed badBIOS could do is at least possible, and most security folks know this. Malware in the BIOS is feasible, and beyond being a &lt;a href="https://www.wired.com/2015/03/researchers-uncover-way-hack-bios-undermine-secure-operating-systems/" target="_blank"&gt;research&lt;/a&gt; topic, it&amp;rsquo;s something we &lt;a href="https://www.schneier.com/blog/archives/2015/02/the_equation_gr.html" target="_blank"&gt;know&lt;/a&gt; the &lt;a href="http://www.spiegel.de/international/world/catalog-reveals-nsa-has-back-doors-for-numerous-devices-a-940994.html" target="_blank"&gt;NSA does&lt;/a&gt;. In fact, because of the hype, &lt;a href="https://github.com/Katee/quietnet" target="_blank"&gt;many&lt;/a&gt; &lt;a href="https://www.anfractuosity.com/projects/ultrasound-networking/" target="_blank"&gt;people&lt;/a&gt; developed ultrasound networking libraries just to demonstrate how viable it is. &lt;/p&gt;

&lt;p&gt;Dragos Ruiu imaged his computer and made a lot of data available to the
community for peer review, but unfortunately no credible researcher&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; has publicly confirmed his findings. Maybe there was something going on. Maybe he was seeing patterns in the noise. Either way, it says something about the world today that when you&amp;rsquo;re a security expert and your computer starts behaving weirdly, the obvious culprit is the NSA.&lt;/p&gt;

&lt;p&gt;It made me think of a different worm, from a more innocent time.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Morris Worm" src="/images/morris_worm.jpg" /&gt;&lt;/p&gt;

&lt;h2&gt;The Morris Worm&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s November 2nd 1988, almost exactly 25 years before badBIOS became a
hashtag. Robert Tappan Morris, a graduate student at Cornell, executes some
code he&amp;rsquo;d been working on and goes to dinner. The aftermath was a
self-replicating computer worm that infected 10% of the Internet&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; at
the time &amp;mdash; a whopping 6,000 computers!&lt;/p&gt;

&lt;p&gt;Morris claimed that he wrote his program to map the size of the Internet. And
indeed, each infection would send a byte to a machine in Berkeley
(hiding the trail to Morris, in Cornell, as the author). Unfortunately,
there was a bug that caused it to propagate too aggressively: it infected the same
computer multiple times, which resulted in a denial of service attack across the
whole Internet. Furthermore, the code to report infections had a bug in it. It tried to
send a UDP packet over a TCP socket, making it useless for reporting the Internet&amp;rsquo;s size.&lt;/p&gt;

&lt;p&gt;An alternative explanation is that Morris was trying to bring to wider attention
some long-standing bugs in the Internet. As Morris&amp;rsquo; friend and future co-founder &lt;a href="http://www.nytimes.com/1988/11/07/us/computer-invasion-back-door-ajar.html" target="_blank"&gt;put it&lt;/a&gt;, in classic pg&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; style:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mr. Graham, who has known the younger Mr. Morris for several years, compared
his exploit to that of Mathias Rust, the young German who flew light plane
through Soviet air defenses in May 1987 and landed in Moscow.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;It&amp;rsquo;s as if &lt;a href="https://en.wikipedia.org/wiki/Mathias_Rust" target="_blank"&gt;Mathias Rust&lt;/a&gt; had not just flown into Red Square, but built
himself a stealth bomber by hand and then flown into Red Square,&amp;rdquo; he said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;What did the Morris Worm actually do?&lt;/h3&gt;

&lt;p&gt;The Morris Worm&lt;sup id="fnref4"&gt;&lt;a href="#fn4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; exploited three separate vulnerabilities. It guessed
passwords for &lt;code&gt;rsh&lt;/code&gt;/&lt;code&gt;rexec&lt;/code&gt;, it exploited a debug-mode backdoor in sendmail and it used &amp;ldquo;one
very neat trick&amp;rdquo;. I&amp;rsquo;ll go over each of these in detail, and you can find an archive (decompiled and commented) of the code for yourself &lt;a href="https://github.com/arialdomartini/morris-worm" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;1. Rsh and Rexec&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;rsh&lt;/code&gt; and &lt;code&gt;rexec&lt;/code&gt; are remote shell protocols from the BSD era that are almost
unused today (since supplanted by &lt;code&gt;ssh&lt;/code&gt;). &lt;code&gt;rsh&lt;/code&gt; can allow passwordless
authentication if coming from a &amp;ldquo;trusted&amp;rdquo; host, which it determines via a list of addresses stored in a global &lt;code&gt;/etc/hosts.equiv&lt;/code&gt; or
per-user &lt;code&gt;.rhosts&lt;/code&gt; file. When an
&lt;code&gt;rsh&lt;/code&gt; request comes from a user of a trusted machine, access is automatically
granted. The worm used this to propagate, searching those two files &amp;mdash; as well as the &lt;code&gt;.forward&lt;/code&gt; file, which back then was used to forward your mail around the Internet &amp;mdash; for trusted hosts.&lt;/p&gt;

&lt;p&gt;Even in 1988, people knew that leaving &lt;code&gt;rsh&lt;/code&gt; open on an untrusted network like
the Internet was a Bad Idea, and so the worm also propagated via &lt;code&gt;rexec&lt;/code&gt;.
Now, &lt;code&gt;rexec&lt;/code&gt; uses password authentication, but Morris made an intelligent assumption:
people tend to reuse passwords.
Back then, &lt;code&gt;/etc/passwd&lt;/code&gt; used to&lt;sup id="fnref5"&gt;&lt;a href="#fn5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; store everyone&amp;rsquo;s encrypted passwords. The
worm shipped with an optimized implementation of
&lt;a href="https://en.wikipedia.org/wiki/Crypt_(Unix)" target="_blank"&gt;&lt;code&gt;crypt&lt;/code&gt;&lt;/a&gt; and a dictionary, and went to town. Once it cracked a password, it tried it against
all the likely hosts it could find.&lt;/p&gt;

&lt;h4&gt;2. Sendmail&amp;rsquo;s Backdoor&lt;/h4&gt;

&lt;p&gt;In the absence of any friendly hosts, the Morris Worm would then exploit a
backdoor in &lt;a href="https://en.wikipedia.org/wiki/Sendmail" target="_blank"&gt;Sendmail&lt;/a&gt;. You see, Sendmail had a &amp;ldquo;debug&amp;rdquo; mode that allowed anyone to route an
email to any process, including the shell! Ironically, this was &lt;a href="http://www.nytimes.com/1988/11/07/us/computer-invasion-back-door-ajar.html" target="_blank"&gt;apparently deliberate&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eric Allman, a computer programmer who designed the mail program that Morris
exploited, said yesterday that he created the back door to allow him to fine
tune the program on a machine that an overzealous administrator would not give
him access to. He said he forgot to remove the entry point before the program
was widely distributed in 1985.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(This wasn&amp;rsquo;t even the first Sendmail backdoor. Sendmail used to ship with &amp;ldquo;wizard mode&amp;rdquo;, where sending the strings &amp;ldquo;WIZ&amp;rdquo; and &amp;ldquo;SHELL&amp;rdquo; gave you a root shell. By the time that Morris was writing his worm, wizard mode was disabled almost everywhere.)&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re wondering how sendmail could have backdoors like this, it seems that it was somewhat well known. This quote from a &lt;a href="http://securitydigest.org/tcp-ip/archive/1988/11" target="_blank"&gt;mail&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/Paul_Vixie" target="_blank"&gt;Paul Vixie&lt;/a&gt; summarizes the situation.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;From: vixie@decwrl.dec.com (Paul Vixie)
Newsgroups: comp.protocols.tcp-ip,comp.unix.wizards
Subject: Re: a holiday gift from Robert "wormer" Morris
Message-ID: &amp;lt;24@jove.dec.com&amp;gt;
Date: 6 Nov 88 19:36:10 GMT
References: &amp;lt;1698@cadre.dsl.PITTSBURGH.EDU&amp;gt; &amp;lt;2060@spdcc.COM&amp;gt;
Distribution: na
Organization: DEC Western Research Lab
Lines: 15


# the hole [in sendmail] was so obvious that i surmise that Morris
# was not the only one to discover it.  perhaps other less
# reproductively minded arpanetters have been having a field
# 'day' ever since this bsd release happened. 

I've known about it for a long time.  I thought it was common knowledge
and that the Internet was just a darned polite place.  (I think it _was_
common knowledge among the people who like to diddle the sendmail source.)

The bug in fingerd was a big surprise, though.  Overwriting a stack frame
on a remote machine with executable code is One Very Neat Trick.
-- 
Paul Vixie
Work:    vixie@decwrl.dec.com    decwrl!vixie    +1 415 853 6600
Play:    paul@vixie.sf.ca.us     vixie!paul      +1 415 864 7013
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Internet was a polite place, indeed.&lt;/p&gt;

&lt;h4&gt;3. One Very Neat Trick&lt;/h4&gt;

&lt;p&gt;The Very Neat Trick that Vixie was talking about is the now-standard
&lt;a href="https://en.wikipedia.org/wiki/Buffer_overflow" target="_blank"&gt;stack buffer overflow&lt;/a&gt;. It&amp;rsquo;s
fascinating to read contemporary accounts that marvel at the cleverness of a class of
bugs that are now ubiquitous &amp;mdash; although, for me at least, they still haven&amp;rsquo;t
lost their magic&lt;sup id="fnref6"&gt;&lt;a href="#fn6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the main routine from the &lt;code&gt;fingerd&lt;/code&gt; of that &lt;a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=4.3BSD/usr/src/etc/fingerd.c" target="_blank"&gt;era&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;av&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpeername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"getpeername"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// ... snip ...
&lt;/span&gt;    &lt;span class="c1"&gt;// build sp into arguments for finger 
&lt;/span&gt;    &lt;span class="c1"&gt;// and call /usr/ucb/finger via execv before
&lt;/span&gt;    &lt;span class="c1"&gt;// putchar'ing the result back to stdout
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have experience with reading C code,&lt;sup id="fnref7"&gt;&lt;a href="#fn7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; you may have spotted the
vulnerability. &lt;code&gt;gets(line)&lt;/code&gt; reads STDIN and puts the contents into a 512 byte
buffer. This means that sending more than 512 bytes will overwrite the stack
with an attacker-controlled value.&lt;/p&gt;

&lt;p&gt;The worm sent 536 bytes of data, which overwrote the
&lt;a href="https://en.wikipedia.org/wiki/Call_stack#Stack_and_frame_pointers" target="_blank"&gt;stack frame&lt;/a&gt;
of the &lt;code&gt;main&lt;/code&gt; function. This allowed Morris to overwrite the pointer to where
&lt;code&gt;main&lt;/code&gt; is returning to. He set that pointer to be &lt;em&gt;within&lt;/em&gt; the 536 byte buffer
he sent over the network. The beginning of the buffer contained
&lt;a href="https://en.wikipedia.org/wiki/Shellcode" target="_blank"&gt;shellcode&lt;/a&gt; that called &lt;code&gt;/bin/sh&lt;/code&gt;. Game over.&lt;/p&gt;

&lt;h2&gt;Aftermath&lt;/h2&gt;

&lt;p&gt;Robert Tappan Morris was convicted and sentenced to three years probation, 400
hours of community service and a $10,050 fine (about $20,000 in today&amp;rsquo;s dollars)
plus the cost of his supervision. He then went on to co-found a little startup
called Viaweb. You may have heard the rest of that story.
Today, Morris is a tenured professor at the Computer Science and Artificial
Intelligence Laboratory at MIT and is one of the leaders of the Parallel and
Distributed Systems Groups.&lt;/p&gt;

&lt;p&gt;Why did the paranoia around badBIOS make me think of the Morris Worm? If you read contemporary articles about the Morris Worm, they&amp;rsquo;ll sometimes mention, but never emphasize, who Robert Morris&amp;rsquo;s father was. The &lt;a href="https://en.wikipedia.org/wiki/Robert_Morris_(cryptographer)" target="_blank"&gt;elder Robert Morris&lt;/a&gt; just happened to be a computer security expert. While the young Robert Morris was writing his worm, Robert Morris Sr. was serving as Chief Scientist at the NSA&amp;rsquo;s National Computer Security Center! &lt;/p&gt;

&lt;p&gt;The Internet grew up a lot since 1988, and not just in size. In 2013, your computer acting strangely is obviously a NSA-written malware that lives in your BIOS and propagates over sound waves imperceptible to the human ear. In 1988, son of an NSA security executive infects 10% of the Internet with a worm that uses an exotic new exploitation technique called a buffer overflow and&amp;hellip; nothing.&lt;/p&gt;

&lt;p&gt;Just to be clear, I&amp;rsquo;m not alleging any conspiracy between father and son, besides perhaps father making some calls after son&amp;rsquo;s arrest. While the Morris worm was likely the first malicious use, buffer overflows were understood as a problem before 1988, if not widely. The way the media narrative handled the NSA connection in 1988 just says a lot about how the world of the Internet changed in 25 years.&lt;/p&gt;

&lt;p&gt;As for Dragos Ruiu, he&amp;rsquo;s been quiet about badBIOS since 2013. I&amp;rsquo;m not sure what he&amp;rsquo;s doing these days besides &lt;a href="https://cansecwest.com/" target="_blank"&gt;CanSecWest&lt;/a&gt;, but in my heart of hearts, I like to picture him playing the saxophone amidst the detritus of his torn up apartment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Conversation" target="_blank"&gt;&lt;img src="/images/the_conversation.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Paying the Bills&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;re trying our best, but we&amp;rsquo;ll only be able to blog about a minuscule percentage of the world&amp;rsquo;s vulnerabilities. And starting with 1988 means we have a lot of catching up to do. How will you ever find about the ones that actually affect you?&lt;/p&gt;

&lt;p&gt;Our product, &lt;a href="https://appcanary.com/?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=morris"&gt;Appcanary&lt;/a&gt;, monitors your apps and servers, and notifies you whenever a new vulnerability is discovered in a package you rely on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/sign_up?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=morris"&gt;Sign up&lt;/a&gt; today!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css"&gt;
&lt;style type="text/css"&gt;
 #mc&lt;em&gt;embed&lt;/em&gt;signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
 /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
      We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
&lt;/style&gt;
&lt;div id="mc_embed_signup"&gt;
&lt;form action="//appcanary.us10.list-manage.com/subscribe/post?u=303b378f377508300c0b5469a&amp;amp;id=dc58e8f56f" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
&lt;div id="mc_embed_signup_scroll"&gt;
&lt;label for="mce-EMAIL"&gt;Liked this post? Subscribe to our newsletter for more!&lt;/label&gt;
&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
&lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_303b378f377508300c0b5469a_dc58e8f56f" tabindex="-1" value=""&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;One of the things I wish that the security industry would do less of is blind appeals to authority, and I hate that I made one here. Unfortunately, I don&amp;rsquo;t have the skills or time to make my own analysis of Ruiu&amp;rsquo;s data, so I just have to trust the Thought Leaders on this one. &amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;The 60,000 computer-strong Internet was of course one of many networks at the time. The Internet was the one that was global and used TCP/IP &amp;mdash; the Internet protocols. Therein lies the pedant&amp;rsquo;s case against the &lt;a href="https://twitter.com/APStylebook/status/716279065888563200" target="_blank"&gt;AP&amp;rsquo;s capitalization&lt;/a&gt; of the word &amp;ldquo;Internet&amp;rdquo;.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;Disclosure time: years after giving that quote, Paul Graham and Robert Morris went on to found Y Combinator along with Jessica Livingston and Trevor Blackwell. YC in turn is an investor in &lt;a href="https://www.appcanary.com"&gt;Appcanary&lt;/a&gt;. Robert Morris and I have never met, though we did once meet with Paul Graham. &amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;My favourite paper on the analysis of the worm is &lt;a href="http://denninginstitute.com/modules/acmpkp/security/texts/INTWORM.PDF" target="_blank"&gt;With Microscope and Tweezers&lt;/a&gt; from MIT&amp;rsquo;s Eichin and Rochlis. They spend a page passionately arguing that it&amp;rsquo;s a virus by using a complicated appeal to the difference between lytic and lysogenic viruses with references to three separate biology textbooks!&amp;nbsp;&lt;a href="#fnref4" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn5"&gt;
&lt;p&gt;I assumed that &lt;code&gt;/etc/shadow&lt;/code&gt; came about as a consequence of the Morris Worm, but it &lt;a href="https://en.wikipedia.org/wiki/Passwd#History" target="_blank"&gt;seems&lt;/a&gt; that it was originally implemented in SunOS earlier in the 80&amp;rsquo;s, and then took 2 years after the Morris Worm to make it into BSD.&amp;nbsp;&lt;a href="#fnref5" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn6"&gt;
&lt;p&gt;Exploits really are magic, and it goes without saying that exploit users have chosen the &lt;a href="https://en.wikipedia.org/wiki/Left-hand_path_and_right-hand_path" target="_blank"&gt;Left-Hand Path&lt;/a&gt; to wizardhood. If the &lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book.html" target="_blank"&gt;cover of SICP&lt;/a&gt; is to be believed, the Right-Hand Path is available through careful study of functional programming and Lisps. Perhaps this is the true reason why Morris and Graham were such effective collaborators.&amp;nbsp;&lt;a href="#fnref6" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn7"&gt;
&lt;p&gt;On the other hand, this C code is over 30 years old. When I ran it through the gcc on my machine,I was very happy to see that it complained bitterly but still compiled it. One exercise for the reader is finding where the network operation actually happens. &lt;code&gt;main&lt;/code&gt; takes input and output from STDIN/STDOUT, but there&amp;rsquo;s an uninitialized &lt;code&gt;struct sockaddr_in sin&lt;/code&gt; that we call &lt;code&gt;getpeername&lt;/code&gt; on. How is a network socket piped to standard input/output and who is initializing the &lt;code&gt;sin&lt;/code&gt; struct? I actually haven&amp;rsquo;t been able to figure this part out. If you know, please tell &lt;a href="mailto:max@appcanary.com"&gt;me&lt;/a&gt;! The full code listing is &lt;a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=4.3BSD/usr/src/etc/fingerd.c" target="_blank"&gt;here&lt;/a&gt;.&amp;nbsp;&lt;a href="#fnref7" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 08/29/2016&lt;/strong&gt; Dave Vandervies emailed me with an explanation!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fingerd was meant to be run from inetd (see &lt;a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=4.3BSD/etc/inetd.conf" target="_blank"&gt;here&lt;/a&gt;),
which sets up the network connection and invokes the actual server process
with its stdin and stdout attached to the network socket.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
As for the getpeername, the address is an out parameter; this call looks up
the peer address of stdin (fd 0), and will fail (and fingerd will error out
on that) if it isn&amp;rsquo;t a socket (see
&lt;a href="http://man.openbsd.org/OpenBSD-current/man2/getpeername.2"&gt;here&lt;/a&gt;).
Since the actual address doesn&amp;rsquo;t get used, that appears to be the purpose of the
call here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Making Appcanary easier to use</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/making-appcanary-easier.html"/>
    <id>http://blog.appcanary.com/2016/making-appcanary-easier.html</id>
    <published>2016-07-13T20:00:00-04:00</published>
    <updated>2016-07-21T10:07:12-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;m excited to announce that we&amp;rsquo;ve added two features that make Appcanary a heck of a lot easier to use!&lt;/p&gt;

&lt;h2&gt;Add monitors by uploading a file&lt;/h2&gt;

&lt;p&gt;Our Monitor API is great if you want to track a set of Linux packages or your Gemfile. We give you a dashboard showing which packages are vulnerable, and email you whenever new vulnerabilities that affect you come out. However, there&amp;rsquo;s always a bunch of setup to get a new API going.&lt;/p&gt;

&lt;p&gt;With that in mind, we made the interface a lot more user friendly! You can now upload a file to watch directly through the website. Just go to &lt;a href="https://appcanary.com/monitors/new"&gt;add monitors&lt;/a&gt; to be able to upload a file directly. Monitors support Ruby&amp;rsquo;s &lt;code&gt;Gemfile.lock&lt;/code&gt;, &lt;code&gt;/var/lib/dpkg/status&lt;/code&gt; for Ubuntu and Debian, and the output of &lt;code&gt;rpm -qa&lt;/code&gt; for Centos and Amazon Linux!&lt;/p&gt;

&lt;h2&gt;Automatically upgrade vulnerable packages&lt;/h2&gt;

&lt;p&gt;A few of our customers told us that knowing about vulnerabilities is nice, but you know what would be &lt;em&gt;great&lt;/em&gt;? If we could somehow &lt;em&gt;patch&lt;/em&gt; them automatically. We thought about it and said, sure, why not!&lt;/p&gt;

&lt;p&gt;If you have the Appcanary &lt;a href="(https://appcanary.com/servers/new)"&gt;agent&lt;/a&gt; installed on an Ubuntu server, and you&amp;rsquo;re running the latest version, you can run &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;appcanary upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in order to install updates for any packages we know to be vulnerable.&lt;/p&gt;

&lt;p&gt;You can also run&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;appcanary upgrade -dry-run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in order to see what the agent will do, without it actually touching your system. &lt;/p&gt;

&lt;p&gt;Now you can manage vulnerabilities, learn about new ones that affect you, and apply patches, all through Appcanary!&lt;/p&gt;

&lt;h4&gt;If you haven&amp;rsquo;t tried us yet&lt;/h4&gt;

&lt;p&gt;Stay on top of the security vulnerabilities that affect you, today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=making_easier"&gt;Appcanary&lt;/a&gt;, monitors your apps and servers, and notifies you whenever a new vulnerability is discovered in a package you rely on. And now it will help you patch vulnerable packages as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/sign_up?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=making_easier"&gt;Sign up&lt;/a&gt; today!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vulnerabilities I Have Known and Loved #1: Symantec's Bad Week</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/vikhal-symantec.html"/>
    <id>http://blog.appcanary.com/2016/vikhal-symantec.html</id>
    <published>2016-07-06T20:00:00-04:00</published>
    <updated>2016-08-19T13:23:10-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; If you use software with &amp;ldquo;Symantec&amp;rdquo; or &amp;ldquo;Norton&amp;rdquo; somewhere in its name, &lt;strong&gt;stop what you&amp;rsquo;re doing and &lt;a href="https://www.symantec.com/support-center/upgrades"&gt;upgrade&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Back in my security consulting days, a mentor taught me One Weird Trick to
increase conversions on your phishing campaign.  It goes like this: set up an email server, get as many employee addresses you can find, and spoof a mass message that reads:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello this is your boss. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to fire someone next week and you get to vote on who! To get your arch-nemisis fired, please log into this website that looks exactly like our company portal, but has one character in the domain name mispelled. &lt;/p&gt;

&lt;p&gt;Thanks, Your Boss.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then you sit back and count how many people fell for it.&lt;/p&gt;

&lt;p&gt;The executive who hired you is happy because they get to demonstrate the value of increasing their
security budget. The consultancy you work for is happy, because they get to upsell a bunch of &amp;ldquo;security awareness
training&amp;rdquo;. &lt;/p&gt;

&lt;p&gt;Soon, you&amp;rsquo;ll be spending three days telling your victims about the
importance of that little green lock in their browser&amp;rsquo;s address bar (but only
when it&amp;rsquo;s in the right place!) and that they should never ever click on links,
never open attachments, and if at all possible, stop using computers altogether. Everybody wins.&lt;/p&gt;

&lt;p&gt;Obviously, everyone at this stage wants to increase the conversion rate&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of these phishing emails. This is where The One Weird Trick comes in: after you send out your first campaign, you craft another one. Before you know it, everyone on your list receives a helpful tip from the IT Helpdesk:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi, &lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve heard reports of a phishing campaign being waged against us. Don&amp;rsquo;t open those emails! It&amp;rsquo;s critically important that you reset your password to protect against those evil hackers who tried to phish us. &lt;/p&gt;

&lt;p&gt;Click here to do it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It turns out that round two gets &lt;em&gt;way&lt;/em&gt; more clicks than round one. Most people will figure out that email #1 is a little fishy. Email #2 manages to reaffirm that, and so they dutifully click, like lambs to slaughter.&lt;/p&gt;

&lt;p&gt;This is the phishing equivalent of the Double Tap. No, not the one from &lt;a href="https://www.youtube.com/watch?v=w4sWxsrEFFs"&gt;Zombieland&lt;/a&gt;. The Double Tap I&amp;rsquo;m talking about is a controversial &lt;a href="http://www.businessinsider.com/drone-double-tap-first-responders-2012-9"&gt;military technique&lt;/a&gt; where after attacking a target, you follow up by sending another missile at the first responders. You do some damage, and then attack the response to that damage.&lt;/p&gt;

&lt;h3&gt;Symantec is Having a Bad Week&lt;/h3&gt;

&lt;p&gt;Last week &lt;a href="https://twitter.com/taviso"&gt;Tavis Ormandy&lt;/a&gt; dropped 8 vulns against every single Symantec/Norton antivirus product. Judging by &lt;a href="http://fortune.com/2016/07/02/symantec-security-irony/"&gt;the press&lt;/a&gt;, things are &lt;a href="http://www.pcworld.com/article/3089463/security/wormable-flaws-in-symantec-products-expose-millions-of-computers-to-hacking.html"&gt;not looking good&lt;/a&gt; for them.&lt;/p&gt;

&lt;p&gt;You can find a writeup up on the &lt;a href="http://googleprojectzero.blogspot.ca/2016/06/how-to-compromise-enterprise-endpoint.html"&gt;Google Project Zero
blog&lt;/a&gt;, and the issues for all 8 vulnerabilities can &lt;a href="https://bugs.chromium.org/p/project-zero/issues/list?can=1&amp;amp;q=label%3AVendor-Symantec"&gt;be found here&lt;/a&gt;. They&amp;rsquo;re all remotely exploitable,&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and they all should give an attacker remote code execution as root/SYSTEM (and in ring 0 for one of them to boot!)&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using a Symantec product I can&amp;rsquo;t stress this enough: &lt;strong&gt;stop what you&amp;rsquo;re doing and &lt;a href="https://www.symantec.com/support-center/upgrades"&gt;upgrade&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These vulnerabilities reminded me of phishing and the Double Tap for two reasons. First, every one of these vulns can be exploited by just sending an email. Since the product is an antivirus, so it&amp;rsquo;s going to scan every file that touches your disk and every email you get for viruses. You don&amp;rsquo;t have to get your target to click a link or even open the message you sent &amp;mdash; Symantec will happily try to parse every email you receive. &lt;/p&gt;

&lt;p&gt;Second, the &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=823&amp;amp;can=1&amp;amp;q=label%3AVendor-Symantec"&gt;stack overflow in Symantec&amp;rsquo;s PowerPoint parser&lt;/a&gt; depends on a Double Tap-like attack! This parser is used to extract metadata and macros from PowerPoint decks (and presumably scan them for known malware) by exposing an I/O abstraction layer &amp;mdash; which it then caches for performance. Tavis found that he could get that cache into a misaligned state, which resulted in the stack buffer overflow. &lt;/p&gt;

&lt;p&gt;This vulnerable codepath is in something called “Bloodhound Heuristics”, which Symantec promotes as a more advanced set of malware detection checks. Since they&amp;rsquo;re not always run, you&amp;rsquo;d think that the vulnerability wouldn&amp;rsquo;t be very exploitable. And yet, it can be targetted every time! Under the default configuration, the system dynamically decides which set of checks to run. All Tavis had to do was try a bunch of known PowerPoint malware, see which one triggered the automatic mode to turn on &amp;ldquo;Bloodhound Heuristics,&amp;rdquo; and put his payload into them.&lt;/p&gt;

&lt;p&gt;The exploit pretends to be a certain kind of known malware in order to trigger some special aggressive checks, which are the exploit&amp;rsquo;s true target. The Double Tap!&lt;/p&gt;

&lt;h3&gt;Vulnerability Management&lt;/h3&gt;

&lt;p&gt;While the above vulnerability is pretty cool, the Symantec bugs that are most interesting to us at Appcanary are &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=810"&gt;CVE-2016-2207&lt;/a&gt; and &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=816"&gt;CVE-2016-2211&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Symantec was shipping its product with out of date versions of &lt;a href="http://www.cabextract.org.uk/libmspack/"&gt;libmspack&lt;/a&gt; and &lt;a href="http://www.rarlab.com/rar_add.htm"&gt;unrarsrc&lt;/a&gt;. Out of date versions that have dozens of known vulnerabilities with public exploits! All Tavis had to do was download public exploits for these known vulnerabilities, and he had an attack against Symantec.&lt;/p&gt;

&lt;p&gt;Ironically, Symantec sells a product called Enterprise Vulnerability Management! This is a hard problem for everyone. At Appcanary, we&amp;rsquo;re working on solving it.&lt;/p&gt;

&lt;h3&gt;P.S.&lt;/h3&gt;

&lt;p&gt;&lt;link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css"&gt;
&lt;style type="text/css"&gt;
 #mc&lt;em&gt;embed&lt;/em&gt;signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
 /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
      We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
&lt;/style&gt;
&lt;div id="mc_embed_signup"&gt;
&lt;form action="//appcanary.us10.list-manage.com/subscribe/post?u=303b378f377508300c0b5469a&amp;amp;id=dc58e8f56f" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
&lt;div id="mc_embed_signup_scroll"&gt;
&lt;label for="mce-EMAIL"&gt;Liked this post? Subscribe to our newsletter for more!&lt;/label&gt;
&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
&lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_303b378f377508300c0b5469a_dc58e8f56f" tabindex="-1" value=""&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Do you have suggestions for vulnerabilities you&amp;rsquo;d like me to write about? You can let me know at &lt;a href="mailto:max@appcanary.com"&gt;max@appcanary.com&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Paying the Bills&lt;/h4&gt;

&lt;p&gt;One quarter of the critical vulnerabilities found in Symantec&amp;rsquo;s products last week were there because they relied on out-of-date libraries with known security holes.&lt;/p&gt;

&lt;p&gt;Our product, &lt;a href="https://appcanary.com/?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=symantec"&gt;Appcanary&lt;/a&gt;, monitors your apps and servers, and notifies you whenever a new vulnerability is discovered in a package you rely on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/sign_up?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=symantec"&gt;Sign up&lt;/a&gt; today!&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;You know, it&amp;rsquo;s interesting that before I became the CEO of a startup, the only time I thought about &amp;ldquo;conversion rates&amp;rdquo; of emails in my career was when I was involved in phishing campaigns.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;I&amp;rsquo;m going to well-actually myself here so you don&amp;rsquo;t have to. Tavis gives a clear path to exploit for 6 of the 8. Of the two that are left, &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=821"&gt;one&lt;/a&gt; is a lack of bounds checking on an array index, and the &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=819"&gt;other&lt;/a&gt; is an integer overflow bug. I&amp;rsquo;m going to go out on a limb and say I think both can lead to code execution. I can&amp;rsquo;t fault the researcher for not going further though; after you find the first 6 remote code executions, you stop feeling the need to keep proving the point&amp;hellip;&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Should you encrypt or compress first?</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/encrypt-or-compress.html"/>
    <id>http://blog.appcanary.com/2016/encrypt-or-compress.html</id>
    <published>2016-06-24T20:00:00-04:00</published>
    <updated>2016-08-19T13:23:10-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <content type="html">&lt;p&gt;Imagine this:&lt;/p&gt;

&lt;p&gt;You work for a big company. Your job is pretty boring. Frankly, your talents are wasted writing boilerplate code for an application whose only users are three people in accounting who can&amp;rsquo;t stand the sight of you.&lt;/p&gt;

&lt;p&gt;Your real passion is security. You read &lt;a href="https://www.reddit.com/r/netsec"&gt;r/netsec&lt;/a&gt; every day and participate in bug bounties after work. For the past three months, you&amp;rsquo;ve been playing a baroque stock trading game that you&amp;rsquo;re winning because you found a heap-based buffer overflow and wrote some AVR shellcode to help you pick stocks.&lt;/p&gt;

&lt;p&gt;Everything changes when you discover that what you had thought was a video game was actually a cleverly disguised recruitment tool. Mont Piper, the best security consultancy in the world, is hiring &amp;mdash; and you just landed an interview!&lt;/p&gt;

&lt;p&gt;A plane ride and an Uber later, you&amp;rsquo;re sitting across from your potential future boss: a slightly sweaty hacker named Gary in a Norwegian metal band t-shirt and sunglasses he refuses to take off indoors.&lt;/p&gt;

&lt;p&gt;You blast through the first part of the interview. You give a great explanation of the difference between privacy and anonymity. You describe the same origin policy in great detail, and give three ways an attacker can get around it. You even whiteboard the intricacies of &lt;code&gt;__fastcall&lt;/code&gt; vs &lt;code&gt;__stdcall&lt;/code&gt;. Finally, you&amp;rsquo;re at the penultimate section, protocol security.&lt;/p&gt;

&lt;p&gt;Gary looks you in the eyes and says: &amp;ldquo;You&amp;rsquo;re designing a network protocol. Do you compress the data and then encrypt it, or do you encrypt and then compress?&amp;rdquo; And then he clasps his hands together and smiles to himself.&lt;/p&gt;

&lt;p&gt;A classic security interview question!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Take a second and think about it. &lt;/p&gt;

&lt;p&gt;At a high level, compression tries to use patterns in data in order to reduce its size. Encryption tries to shuffle data in such a way that without the key, you can&amp;rsquo;t find any patterns in the data at all. &lt;/p&gt;

&lt;p&gt;Encryption produces output that appears random: a jumble of bits with a lot of entropy. Compression doesn&amp;rsquo;t really work on data that appears random &amp;mdash; entropy can actually be thought of as a measure of how &amp;ldquo;compressable&amp;rdquo; some data is.&lt;/p&gt;

&lt;p&gt;So if you encrypt first, your compression will be useless. The answer must be to compress first! Even StackOverflow &lt;a href="http://stackoverflow.com/questions/4676095/when-compressing-and-encrypting-should-i-compress-first-or-encrypt-first"&gt;thinks so&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;You start to say this to Gary, but you stop mid-sentence. An attacker sniffing encrypted traffic doesn&amp;rsquo;t get much information, but they do get to learn the length of messages. If they can somehow use that to learn more information about the message, maybe they can foil the encryption.&lt;/p&gt;

&lt;p&gt;You start explaining this to Gary, and he interrupts you &amp;mdash; &amp;ldquo;Oh you mean like the &lt;a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2012/september/details-on-the-crime-attack/"&gt;CRIME&lt;/a&gt; attack?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Yes!&amp;rdquo; you reply. You start to recall the details of it. All the SSL attacks with catchy names are mixed together in your mind, but you&amp;rsquo;re pretty sure that&amp;rsquo;s the one. They controlled some information that was being returned by the server, and used that to generate guesses for a secret token present in the response. The response was compressed in such a way that you could validate guesses for the secret by seeing how you affected the length of the compressed message. If the secret was &lt;code&gt;AAAA&lt;/code&gt; and you guessed &lt;code&gt;AAAA&lt;/code&gt;, the compressed-then-encrypted response will be shorter than if you guessed &lt;code&gt;BBBB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Gary looks impressed. &amp;ldquo;But what if the attacker can&amp;rsquo;t control any of the plaintext in any way? Is this kind of attack still possible?&amp;rdquo; he asks.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;CRIME was a very cool demonstration of how compress-then-encrypt isn&amp;rsquo;t always the right decision, but my favorite compress-then-encrypt attack was published a year earlier by Andrew M. White, Austin R. Matthews, Kevin Z. Snow, and Fabian Monrose. The paper &lt;a href="http://www.cs.unc.edu/~fabian/papers/foniks-oak11.pdf"&gt;Phonotactic Reconstruction of Encrypted VoIP Conversations&lt;/a&gt; gives a technique for reconstructing speech from an encrypted VoIP call.&lt;/p&gt;

&lt;p&gt;Basically, the idea is this: VoIP compression isn&amp;rsquo;t going to be a generic audio compression algorithm, because we can rely on some assumptions about human speech in order to compress more efficiently. From the paper:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many modern speech codecs are based on variants of a well-known speech coding
scheme known as code-excited linear prediction (CELP) [49], which is in turn
based on the source-filter model of speech prediction. The source-filter model
separates the audio into two signals: the excitation or source signal, as
produced by the vocal cords, and the shape or filter signal, which models the
shaping of the sound performed by the vocal tract. This allows for
differentiation of phonemes; for instance, vowels have a periodic excitation
signal while fricatives (such as the [sh] and [f] sounds) have an excitation
signal similar to white noise [53].&lt;/p&gt;

&lt;p&gt;In basic CELP, the excitation signal is modeled as an entry
from a fixed codebook (hence code-excited). In some CELP
variants, such as Speex’s VBR (variable bit rate) mode, the codewords can
be chosen from different codebooks depending on the complexity
of the input frame; each codebook contains entries
of a different size. The filter signal is modeled using linear
prediction, i.e., as a so-called adaptive codebook where the
codebook entries are linear combinations of past excitation
signals. The “best” entries from each codebook are chosen
by searching the space of possible codewords in order
to “perceptually” optimize the output signal in a process
known as analysis-by-synthesis [53]. Thus an encoded frame
consists of a fixed codebook entry and gain (coefficient) for
the excitation signal and the linear prediction coefficients for
the filter signal.&lt;/p&gt;

&lt;p&gt;Lastly, many VoIP providers (including Skype) use VBR 
codecs to minimize bandwidth usage while maintaining
call quality. Under VBR, the size of the codebook entry,
and thus the size of the encoded frame, can vary based
on the complexity of the input frame. The specification
for Secure RTP (SRTP) [3] does not alter the size of the
original payload; thus encoded frame sizes are preserved
across the cryptographic layer. The size of the encrypted
packet therefore reflects properties of the input signal; it is
exactly this correlation that our approach leverages to model
phonemes as sequences of lengths of encrypted packets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That pretty much summarizes the paper. CELP + VBR means that message length is going to depend on complexity. Due to how linear prediction works, more information is needed to encode a drastic change in sound &amp;mdash; like the pause between phonemes! This allows the authors to build a model that can break an &lt;strong&gt;encrypted&lt;/strong&gt; audio signal into phonemes: that is, deciding which audio frames belong to which unit of speech.&lt;/p&gt;

&lt;p&gt;They then built a classifier that, still only using the packet length information they started with, decides which segmented units of encrypted audio represent which actual phonemes. They then use a language model to correct the previous step&amp;rsquo;s output and segment the phoneme stream into words and then phrases.&lt;/p&gt;

&lt;p&gt;The crazy thing is that this whole rigmarole works! They used a metric called &lt;a href="http://www.cs.cmu.edu/~alavie/METEOR/"&gt;METEOR&lt;/a&gt; and got scores of around .6. This is on a scale where &amp;lt;.5 is considered &amp;ldquo;interpretable by a human.&amp;rdquo; Considering that the threat vector here is a human using this technique to listen in on your encrypted VoIP calls &amp;mdash; that&amp;rsquo;s pretty amazing! &lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;After passing the rigorous all-night culture fit screening, you end up getting the job. Six months later, Mont Piper is sold to a large conglomerate. Gary refuses to trade in his Norwegian metal t-shirts for a button-down and is summarily fired. You now spend your days going on-site to a big bank, &amp;ldquo;advising&amp;rdquo; a team that hates your guts.&lt;/p&gt;

&lt;p&gt;But recently, you&amp;rsquo;ve picked up machine learning and found this really cool online game where you try to make a 6-legged robot walk in a 3d physics simulation&amp;hellip;&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;P.S.&lt;/h3&gt;

&lt;p&gt;&lt;link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css"&gt;
&lt;style type="text/css"&gt;
 #mc&lt;em&gt;embed&lt;/em&gt;signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
 /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
      We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
&lt;/style&gt;
&lt;div id="mc_embed_signup"&gt;
&lt;form action="//appcanary.us10.list-manage.com/subscribe/post?u=303b378f377508300c0b5469a&amp;amp;id=dc58e8f56f" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
&lt;div id="mc_embed_signup_scroll"&gt;
&lt;label for="mce-EMAIL"&gt;Liked this post? Subscribe to our newsletter for more!&lt;/label&gt;
&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
&lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_303b378f377508300c0b5469a_dc58e8f56f" tabindex="-1" value=""&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Paying the Bills&lt;/h4&gt;

&lt;p&gt;Vulnerabilities come out every day, and most don&amp;rsquo;t get blog posts like this written about them.&lt;/p&gt;

&lt;p&gt;Our product, &lt;a href="https://appcanary.com/?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=compress"&gt;Appcanary&lt;/a&gt;, monitors your apps and servers, and notifies you whenever a new vulnerability is discovered in a package you rely on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/sign_up?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=compress"&gt;Sign up&lt;/a&gt; today!&lt;/p&gt;
</content>
  </entry>
</feed>
