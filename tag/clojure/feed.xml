<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Appcanary: Clojure</title>
  <subtitle>Posts tagged with Clojure</subtitle>
  <id>http://blog.appcanary.com</id>
  <link href="http://blog.appcanary.com"/>
  <link href="http://blog.appcanary.com/tag/clojure/feed.xml" rel="self"/>
  <updated>2016-01-28T19:00:00-05:00</updated>
  <entry>
    <title>Maven Central Security</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/maven-central-security.html"/>
    <id>http://blog.appcanary.com/2016/maven-central-security.html</id>
    <published>2016-01-28T19:00:00-05:00</published>
    <updated>2017-01-10T17:51:38-05:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <summary type="html">&lt;p&gt;The security of your package manager is very important to us at appcanary, and it’s important to make sure the packages you’re downloading are secure in transit.&lt;/p&gt;

&lt;p&gt;Back in the summer of 2014, I discovered that &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;  wasn’t using TLS or any...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The security of your package manager is very important to us at appcanary, and it’s important to make sure the packages you’re downloading are secure in transit.&lt;/p&gt;

&lt;p&gt;Back in the summer of 2014, I discovered that &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;  wasn’t using TLS or any signature verification when serving up java packages.&lt;/p&gt;

&lt;p&gt;I gave a talk at &lt;a href="http://bangbangcon.com/index.html"&gt;!!con 2015&lt;/a&gt; about what I did to help convince them to start using encryption.&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6NdLZl16OkA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
</content>
    <category term="Java"/>
    <category term="Maven"/>
    <category term="Clojure"/>
    <category term="Programming"/>
    <category term="Security"/>
    <category term="Talks"/>
  </entry>
  <entry>
    <title>How being lazy about state management in Clojure caused us downtime</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/state-management-downtime.html"/>
    <id>http://blog.appcanary.com/2016/state-management-downtime.html</id>
    <published>2016-02-01T19:00:00-05:00</published>
    <updated>2017-01-13T09:15:13-05:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <summary type="html">&lt;p&gt;On November 10th, we suffered some downtime as our backend application mysteriously crashed and had to be restarted. After looking at our process monitoring service, I found a very suspicious graph:&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="/images/system.process.threads.png"&gt;&lt;/p&gt;

&lt;p&gt;Somehow, we managed to spin up more then 30,000...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;On November 10th, we suffered some downtime as our backend application mysteriously crashed and had to be restarted. After looking at our process monitoring service, I found a very suspicious graph:&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="/images/system.process.threads.png" /&gt;&lt;/p&gt;

&lt;p&gt;Somehow, we managed to spin up more then 30,000 threads right before the application crashed. This was very likely the cause of the failure, but how did it happen?&lt;/p&gt;

&lt;p&gt;An easy way to get an idea of where a thread leak is coming from is to look at the thread names. In Java you can do this with &lt;code&gt;jstack -l $PID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get a list of all thread names of a Java application sorted by most common name, you can do:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jstack -l $PID | grep daemon |  awk '{ print $1 }' | sort | uniq -c |   sort -nr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which on our end yielded something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  30000 "Analytics"
      2 "Datomic
      2 "C2
      1 "worker-4"
      1 "worker-3"
      1 "worker-2"
      1 "worker-1"
      1 "Timer-0"
      1 "Thread-5"
      1 "Thread-4
      1 "Thread-3
      1 "Thread-2
      1 "Thread-1
      1 "Thread-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm&amp;hellip;&lt;/p&gt;

&lt;h3 id="background"&gt;Background&lt;/h3&gt;

&lt;p&gt;Our backend is written in Clojure and we use Stuart Sierra&amp;rsquo;s &lt;a href="https://github.com/stuartsierra/component"&gt;component&lt;/a&gt; framework to manage most of our application&amp;rsquo;s state and lifecycle. Normally this should prevent runaway threads, but unfortunately for us our analytics client&amp;rsquo;s state was managed independently of the framework. To explain why, I need to first delve a little in to how component works.&lt;/p&gt;

&lt;p&gt;Regardless of how beautiful and functional it may be, any application that talks to the outside world will need to manage some state representing these external resources. We need to manage our database connections, our clients for external APIs, our background workers, etc.&lt;/p&gt;

&lt;p&gt;One way to deal with this in Clojureland is to create a global singleton object for representing each stateful piece, possibly wrapped in an &lt;code&gt;atom&lt;/code&gt;. This feels lacking, though. You still need a way to initialize all these singletons on startup, and having mutable singletons everywhere goes against what I would consider good Clojure style.&lt;/p&gt;

&lt;p&gt;Component solves this problem by implementing dependency injection in a Clojurelike way. You define a graph that represents each stateful piece, how they depend on each other, and how each piece starts and stops. On system start, component boots each piece in the right order, passing along references to dependencies when they&amp;rsquo;re needed.&lt;/p&gt;

&lt;p&gt;For example, Appcanary&amp;rsquo;s dependency graph looks (something) like this:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;canary-system&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;;;Initialize logging
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;component/system-map&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="no"&gt;:datomic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;new-datomic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:datomic-uri&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="no"&gt;:scheduler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;new-scheduler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="no"&gt;:mailer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;component/using&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;new-mailer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:mandrill-key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
                             &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;:datomic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:scheduler&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="no"&gt;:web-server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;component/using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;new-web-server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:http-ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Integer.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:http-port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;canary-api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
                             &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;:datomic&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;mailer&lt;/code&gt; depends on &lt;code&gt;datomic&lt;/code&gt; and the &lt;code&gt;scheduler&lt;/code&gt;, the web server depends on &lt;code&gt;datomic&lt;/code&gt;, and both &lt;code&gt;datomic&lt;/code&gt; and the &lt;code&gt;scheduler&lt;/code&gt; don&amp;rsquo;t depend on anything.&lt;/p&gt;

&lt;p&gt;Like all the other components, the &lt;code&gt;new-datomic&lt;/code&gt; function is a constructor for a record that knows how to start and stop itself. On system start, all the components are started, and the dependencies are filled in.&lt;/p&gt;

&lt;h3 id="sometimes-component-feels-like-overkill"&gt;Sometimes component feels like overkill&lt;/h3&gt;

&lt;p&gt;Component is great, but it didn&amp;rsquo;t fit our analytics engine usecase. We use &lt;a href="https://segment.io"&gt;segment.io&lt;/a&gt; to handle our app analytics, and we needed to maintain a client to talk to it. An analytics event can potentially be called from anywhere in the app, but it&amp;rsquo;s cumbersome to pass an analytics client reference to every component, and into every analytics call. If every component depends on something, it feels like maybe it should be a global singleton. Futhermore, I don&amp;rsquo;t want my components to know much about the analytics client at all; I just want them to know how to trigger events.&lt;/p&gt;

&lt;p&gt;What I want to have is an analytics namespace which contains all the events I may want to trigger, and wraps the client inside all of them. This lets me  do something like &lt;code&gt;(analytics/user-added-server user)&lt;/code&gt; inside of the code that handles server creation.&lt;/p&gt;

&lt;p&gt;(One thing to note is that while there is a clojure segment.io &lt;a href="https://github.com/ardoq/analytics-clj"&gt;client&lt;/a&gt;, it&amp;rsquo;s based off a 1.x release of the underlying &lt;a href="https://github.com/segmentio/analytics-java"&gt;java library&lt;/a&gt;, while we wanted to use features only available in the 2.0 release. Because of that, I wrote an analytics namespace that called the java library directly).&lt;/p&gt;

&lt;p&gt;The first pass of creating the client looked something like this:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defonce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Analytics/builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:segment-api-key&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s"&gt;"Wrapper for analytics/track"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;production?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.enqueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="c1"&gt;;; Java interop to build the analytics message here)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s only one problem with the above code: the segment api key is loaded from an environment variable. &lt;/p&gt;

&lt;p&gt;We deploy appcanary in a pretty standard way &amp;ndash; we compile an uberjar and rsync it to the server. API keys live in environment variables, and the production API key is only going to live on the production server. So, at compile time, we have no way of knowing what the segment api key is. As a result, the analytics client needs to be built at runtime and not compile time in order to have access to the api key.&lt;/p&gt;

&lt;h3 id="this-is-where-i-get-lazy"&gt;This is where I get lazy&lt;/h3&gt;

&lt;p&gt;The obvious thing to do to build the analytics client at runtime is to wrap it as a function:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Analytics/builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:segment-api-key&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s"&gt;"Wrapper for analytics/track"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;production?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.enqueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="c1"&gt;;; Java interop to build the analytics message here)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saw three downsides here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;ll lose some efficiency from not reusing the TCP connection to segment.io&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s possible that we&amp;rsquo;ll have to waste a bit of time authenticating the analytics client on each call&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ll spawn an extra client object per call, which will be garbage collected right away as it goes out of scope immediately after the &lt;code&gt;track&lt;/code&gt; call&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above three things aren&amp;rsquo;t intrinsically bad, and it seemed like optimizing the performance of your analytics engine early on was a wasteful thing to do in a fast-paced startup environment.&lt;/p&gt;

&lt;p&gt;What I didn&amp;rsquo;t consider is that the java library uses &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to manage a threadpool, and &lt;code&gt;shutdown&lt;/code&gt; must be called explicitly. Otherwise, the threads are put on hold instead of being marked for GC (see also &lt;a href="http://stackoverflow.com/questions/16122987/reason-for-calling-shutdown-on-executorservice"&gt;this stackoverflow&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The fact that each client spawns a thread that isn&amp;rsquo;t cleaned up by garbage collection was not &lt;a href="https://segment.com/docs/libraries/java/"&gt;documented&lt;/a&gt; unfortunately.&lt;/p&gt;

&lt;h3 id="outcome"&gt;Outcome&lt;/h3&gt;

&lt;p&gt;Every analytics call we made spawned another threadpool, which caused the thread count to grow proportionally with user activity. We hit 40,000 threads before our application crashed.&lt;/p&gt;

&lt;h3 id="tl-dr"&gt;TL;DR:&lt;/h3&gt;

&lt;p&gt;We spawned a new client object on every analytics call, not realizing that the underlying library uses a thread pool that&amp;rsquo;s not shutdown on garbage collection. This is how we ended up killing the server by hitting 40,000 threads&lt;/p&gt;
</content>
    <category term="Clojure"/>
    <category term="Programming"/>
    <category term="Developer Diary"/>
    <category term="Bugs"/>
  </entry>
  <entry>
    <title>A Gentle Intro to Datomic</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/datomic-intro-talk.html"/>
    <id>http://blog.appcanary.com/2016/datomic-intro-talk.html</id>
    <published>2016-02-08T19:00:00-05:00</published>
    <updated>2016-04-06T13:47:17-04:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <summary type="html">&lt;p&gt;We use &lt;a href="http://www.datomic.com/"&gt;Datomic&lt;/a&gt; as one of our datastores, and have been really enjoying it so far.&lt;/p&gt;

&lt;p&gt;I gave a talk to my local &lt;a href="http://www.meetup.com/Clojure-Toronto/"&gt;Clojure meetup&lt;/a&gt; that provided a gentle introduction to Datomic and highlighted some cool features.&lt;/p&gt;

&lt;p&gt;The slides are below:&lt;/p&gt;

&lt;script async="" class="speakerdeck-embed" data-id="dd426e5c924f44eb9050c554137ae030" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
</summary>
    <content type="html">&lt;p&gt;We use &lt;a href="http://www.datomic.com/"&gt;Datomic&lt;/a&gt; as one of our datastores, and have been really enjoying it so far.&lt;/p&gt;

&lt;p&gt;I gave a talk to my local &lt;a href="http://www.meetup.com/Clojure-Toronto/"&gt;Clojure meetup&lt;/a&gt; that provided a gentle introduction to Datomic and highlighted some cool features.&lt;/p&gt;

&lt;p&gt;The slides are below:&lt;/p&gt;

&lt;script async="" class="speakerdeck-embed" data-id="dd426e5c924f44eb9050c554137ae030" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
</content>
    <category term="Clojure"/>
    <category term="Datomic"/>
    <category term="Programming"/>
    <category term="Talks"/>
  </entry>
  <entry>
    <title>Slippery exceptions in Clojure and Ruby</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/slippery-exception-clojure-ruby.html"/>
    <id>http://blog.appcanary.com/2016/slippery-exception-clojure-ruby.html</id>
    <published>2016-02-15T19:00:00-05:00</published>
    <updated>2017-01-13T09:15:13-05:00</updated>
    <author>
      <name>Phillip Mendonça-Vieira</name>
    </author>
    <summary type="html">&lt;p&gt;Recently I spent a couple of hours banging my head against code that looks like this:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parse-file&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;nil?&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code-that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throws-an-exception&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;consume-manifest&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;try+&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;Recently I spent a couple of hours banging my head against code that looks like this:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parse-file&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;nil?&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code-that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throws-an-exception&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;consume-manifest&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;try+&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;java.lang.Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;throw+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;::bad-parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Invalid file."&lt;/span&gt;&lt;span class="p"&gt;}))))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;try+&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;consume-manifest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;slurp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;not-empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And much to my surprise, I kept getting the kind of exception &lt;code&gt;parse-file&lt;/code&gt; generates deep within the &lt;code&gt;check&lt;/code&gt; function, right up against &lt;code&gt;(not-empty artifacts)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve grown somewhat used to Clojure exceptions being unhelpful, but this was taking the cake. Coming from Ruby and pretty much every other language, this brushed up rudely against my expectations. &lt;/p&gt;

&lt;p&gt;You can tell that exceptions in Clojure are unloved, given how cumbersome handling them natively is. We&amp;rsquo;d had some trouble in the past getting &lt;a href="https://github.com/scgilardi/slingshot"&gt;slingshot&lt;/a&gt; to behave properly, so I zero&amp;#39;ed in on there. Don&amp;rsquo;t all exceptions in Java descend from &lt;code&gt;Exception&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Stepping through &lt;code&gt;check&lt;/code&gt; in the &lt;a href="cursive-ide.com"&gt;Cursive&lt;/a&gt; debugger, I could see that the exception generated was a pure java exception, not a slingshot exception generated by &lt;code&gt;throw+&lt;/code&gt; in &lt;code&gt;consume-manifest&lt;/code&gt;. This meant that the exception was slipping straight through uncaught. But calling &lt;code&gt;consume-manifest&lt;/code&gt; directly in my repl was causing it to work as intended.&lt;/p&gt;

&lt;p&gt;What the hell was going on?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mveytsman"&gt;Max&lt;/a&gt; took one look at it and set me straight. &amp;ldquo;Oh. &lt;a href="https://clojuredocs.org/clojure.core/remove"&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; is lazy, so the exception isn&amp;rsquo;t being throw until the lazy sequence is accessed.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Excuse me? I had an angry expression on my face. He looked sheepish.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;How else would a lazy data structure work?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well. I would expect a &lt;code&gt;catch java.lang.Exception&lt;/code&gt; to &lt;em&gt;catch every exception&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Right, well, hear me out. What if you had the following Ruby?&amp;rdquo;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lazy_parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each_line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"You can't catch me, I'm the exception man"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume_file&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="n"&gt;lazy_parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Gemfile.lock"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Woops, an exception. Good thing we caught it."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume_file&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Did you know that Ruby has had &lt;a href="http://railsware.com/blog/2012/03/13/ruby-2-0-enumerablelazy/"&gt;lazy enumerables&lt;/a&gt; for almost four years now? Worth reading &lt;a href="http://patshaughnessy.net/2013/4/3/ruby-2-0-works-hard-so-you-can-be-lazy"&gt;Shaughnessy as well&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;That shut me up good. And in case you were wondering, the stack trace is also useless in Ruby; there simply isn&amp;rsquo;t any context for it to preserve. Frankly, I&amp;rsquo;ve just never had to think about lazy data structures in Rubyland; they&amp;rsquo;ve not been super popular. &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s hard to reason about this. I want to write wrapper functions that make my code safe to consume downstream. This isn&amp;rsquo;t feasible for any functions iterating over potentially infinite lazy sequences, but fortunately for us we need to fit this file into memory anyways. In Ruby we&amp;rsquo;d have to forcibly iterate over every element of the sequence and check for exceptions, but Clojure makes this easy with &lt;a href="https://clojuredocs.org/clojure.core/doall"&gt;&lt;code&gt;doall&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parse-file&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doall&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;nil?&lt;/span&gt;&lt;span class="w"&gt;
                 &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code-that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throws-an-exception&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, things behave as intended.&lt;/p&gt;
</content>
    <category term="Clojure"/>
    <category term="Ruby"/>
    <category term="Programming"/>
    <category term="Bugs"/>
    <category term="Developer Diary"/>
  </entry>
  <entry>
    <title>We Left Clojure. Here's 5 Things I'll Miss.</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/missing-clojure.html"/>
    <id>http://blog.appcanary.com/2016/missing-clojure.html</id>
    <published>2016-11-06T19:00:00-05:00</published>
    <updated>2017-01-23T15:21:37-05:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <summary type="html">&lt;p&gt;On October 11th, Appcanary relied on about 8,500 lines of clojure code. On the
12th we were down to zero. We replaced it by adding another 5,700 lines of Ruby to our codebase. 
&lt;a href="https://twitter.com/phillmv"&gt;Phill&lt;/a&gt; will be discussing why we left, and what we learned both here and...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;On October 11th, Appcanary relied on about 8,500 lines of clojure code. On the
12th we were down to zero. We replaced it by adding another 5,700 lines of Ruby to our codebase. 
&lt;a href="https://twitter.com/phillmv"&gt;Phill&lt;/a&gt; will be discussing why we left, and what we learned both here and &lt;a href="http://rubyconf.org/program#prop_19"&gt;at this year&amp;rsquo;s RubyConf&lt;/a&gt;. For now, I want to talk about what I&amp;rsquo;ll miss.&lt;/p&gt;

&lt;h3 id="1-the-joy-of-lisp"&gt;1) The joy of Lisp&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://xkcd.com/297/"&gt;&lt;img alt="XKCD #297" src="http://imgs.xkcd.com/comics/lisp_cycles.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s something magical about writing lisp. Alan Kay called it the greatest
single programming language ever devised. Paul Graham called it a
secret weapon. You can find tens of thousands
of words on the elegant, mind-expanding powers of lisp&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. I don&amp;rsquo;t think
my version of the Lisp wizardry blog post would be particularly original or
unique, so if you want to know more about the agony and ecstasy of wielding
parenthesis, read &lt;a href="http://paulgraham.com/avg.html"&gt;Paul Graham&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s great about Clojure is that while Ruby
&lt;a href="http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/"&gt;might be an acceptable lisp&lt;/a&gt;,
and lisp might
&lt;a href="http://steve-yegge.blogspot.ca/2006/04/lisp-is-not-acceptable-lisp.html"&gt;not be an acceptable lisp&lt;/a&gt;,
Clojure is a more than acceptable lisp. If we avoid the minefield of type
systems, Clojure addresses the other 4 problems Steve Yegge discusses in the previous link&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id="2-immutability"&gt;2) Immutability&lt;/h3&gt;

&lt;p&gt;The core data structures in clojure are immutable. If I define &lt;code&gt;car&lt;/code&gt; to be &lt;code&gt;&amp;quot;a dirty van&amp;quot;&lt;/code&gt;,
nothing can ever change that. I can name some other thing &lt;code&gt;car&lt;/code&gt; later, but
anything referencing that first &lt;code&gt;car&lt;/code&gt; will always be referencing &lt;code&gt;&amp;quot;a dirty van&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is great for a host of reasons. For one, you get parallelization for free &amp;mdash;
since nothing will mutate your collection, mapping or reducing some function
over it can be hadooped out to as many clouds as you want without changing your
algorithms.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also much easier to can reason about your code. There&amp;rsquo;s a famous quote by Larry Wall:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Perl] would prefer that you stayed out of its living room because you weren&amp;rsquo;t
invited, not because it has a shotgun.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He was talking about private methods, but the same is true for mutability in most languages. You call some method and who knows if it mutated a value you were using? You would prefer it not to, but you have no shotgun, and frankly it&amp;rsquo;s so easy to mutate state without even knowing that you are. Consider Python:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My name "&lt;/span&gt;
&lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt;
&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"is Max"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt;
&lt;span class="c"&gt;# "My name is Max"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;
&lt;span class="c"&gt;# "My name"&lt;/span&gt;

&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;span class="c"&gt;# [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;
&lt;span class="c"&gt;# [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling &lt;code&gt;+=&lt;/code&gt; on a string returned a new one, while calling &lt;code&gt;+=&lt;/code&gt; on a list
mutated it in place! I have to remember which types are mutable, and whether
&lt;code&gt;+=&lt;/code&gt; will give me a new object or mutate the existing one depending on its type.
Who knows what might happen when you start passing your variables by reference
to somewhere else?&lt;/p&gt;

&lt;p&gt;Not having the choice to mutate state is as liberating as getting rid of your Facebook account.&lt;/p&gt;

&lt;h3 id="3-data-first-programming"&gt;3) Data first programming&lt;/h3&gt;

&lt;p&gt;Walking away from object-oriented languages is very freeing. &lt;/p&gt;

&lt;p&gt;I want to design a model for the game of poker. I start by listing the
nouns&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;: &amp;ldquo;card&amp;rdquo;, &amp;ldquo;deck&amp;rdquo;, &amp;ldquo;hand&amp;rdquo;, &amp;ldquo;player&amp;rdquo;, &amp;ldquo;dealer&amp;rdquo;, etc. Then I
think of the verbs, &amp;ldquo;deal&amp;rdquo;, &amp;ldquo;bet&amp;rdquo;, &amp;ldquo;fold&amp;rdquo;, etc. &lt;/p&gt;

&lt;p&gt;Now what?
&lt;a href="http://stackoverflow.com/questions/19553838/oop-design-quesiton-with-a-card-game"&gt;Here&amp;rsquo;s&lt;/a&gt;
a typical StackOverflow question demonstrating the confusion that comes with
designing like this. Is the dealer a kind of player or a separate class? If
players have hands of cards, how does the deck keep track of what cards are
left? &lt;/p&gt;

&lt;p&gt;At the end of the day, the work of programming a poker game is codifying all of
the actual rules of the game, and these will end up in a &lt;code&gt;Game&lt;/code&gt; singleton that
does most of the work anyway. &lt;/p&gt;

&lt;p&gt;If you start by thinking about data and the functions that operate on it,
there&amp;rsquo;s a natural way to solve hard problems from the top-down, which lets you quickly iterate your
design (see below). You have some data structure that represents the game
state, a structure representing possible actions a player can take, and a
function to transform a game state and an action into the next game state. That
function encodes the actual rules of poker (defined in lots of other, smaller
functions).&lt;/p&gt;

&lt;p&gt;I find this style of programming very natural and satisfying. Of course, you can
do this in any language; but I find Clojure draws me towards it, while OO
languages push me away from it.&lt;/p&gt;

&lt;h3 id="4-unit-testing"&gt;4) Unit Testing&lt;/h3&gt;

&lt;p&gt;The majority of your code is made up of pure functions. A pure function is one
which always gives the same output for a given input &amp;mdash; doesn&amp;rsquo;t that sound
easy to test? Instead of setting up test harnesses databases and mocks, you just
write tests for your functions.&lt;/p&gt;

&lt;p&gt;Testing the edges of your code that talk to the outside world requires mocking,
of course, and integration testing is never trivial. But the first thing you want to
test is the super-complicated piece of business logic deep in your
codebase. The business logic your business depends on, like for instance computing
whether your version of OpenSSL is vulnerable to HeartBleed. &lt;/p&gt;

&lt;p&gt;Clojure pushes you
to make that bit of code a pure function that&amp;rsquo;s testable without setting
up complicated state.&lt;/p&gt;

&lt;h3 id="5-refactoring"&gt;5) Refactoring&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a typical clojure function&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;;; some code here
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;some-function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;;; a ton of 
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; complicated code here
&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In lisp-speak, a parenthesized block is called a &amp;ldquo;form&amp;rdquo;. The &lt;code&gt;foo&lt;/code&gt; form is the outer form, and it contains the &lt;code&gt;let&lt;/code&gt; form, which ostensibly contains other forms that do complicated things.&lt;/p&gt;

&lt;p&gt;I know that all the complicated code inside of the &lt;code&gt;let&lt;/code&gt; form isn&amp;rsquo;t going to
mutate any state, and that it&amp;rsquo;s only dependent on the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; variables. This means that
refactoring this code out into its own functions is as trivial as selecting
everything between two matching parentheses and cutting and pasting it out. If
you have an editor that supports paredit-style navigation of lisp forms, you can
rearrange code at lightning speed.&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;My favourite essay of this ilk is Mark Tarver&amp;rsquo;s melancholy
&lt;a href="http://www.shenlanguage.org/lambdassociates/htdocs/blog/bipolar.htm"&gt;The Bipolar Lisp Programmer&lt;/a&gt;.
He describes lisp as a language designed by and for brilliant failures. Back
in university, I ate this shit up. My grades were obvious evidence of half the
requirement of being a lisp programmer.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;I&amp;rsquo;m aware that clojure&amp;rsquo;s &lt;code&gt;gensym&lt;/code&gt; does not a hygenic macro system
make. But, if you have strong opinions on hygenic macros as they relate to
acceptable lisps, this article might not be for you.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;For the record, I know that this isn&amp;rsquo;t the &amp;ldquo;right&amp;rdquo; way to design OO
programs, but the fact that I have to acknowledge this proves my point.&amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <category term="Clojure"/>
    <category term="Programming"/>
    <category term="Ruby"/>
  </entry>
  <entry>
    <title>Good News: Ubuntu Now Ships With unattended-upgrades On By Default!</title>
    <link rel="alternate" href="http://blog.appcanary.com/2016/unattended-upgrades.html"/>
    <id>http://blog.appcanary.com/2016/unattended-upgrades.html</id>
    <published>2016-11-14T19:00:00-05:00</published>
    <updated>2017-01-10T17:51:38-05:00</updated>
    <author>
      <name>Max Veytsman</name>
    </author>
    <summary type="html">&lt;p&gt;Last week, we got a strange support request. One of our users had received the following notification:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey! Good job.&lt;/p&gt;

&lt;p&gt;We’ve detected that you patched some vulnerabilities.&lt;/p&gt;

&lt;p&gt;Here’s what changed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/vulns/46220"&gt;CVE-2016-8704&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;is no longer present in:&lt;/p&gt;

&lt;p&gt;[name of...&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;Last week, we got a strange support request. One of our users had received the following notification:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey! Good job.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve detected that you patched some vulnerabilities.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what changed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appcanary.com/vulns/46220"&gt;CVE-2016-8704&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;is no longer present in:&lt;/p&gt;

&lt;p&gt;[name of server redacted]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This came as a surprise, since they knew for a fact that no one had touched the package in
question, and they were certain they had not enabled unattended upgrades. &lt;/p&gt;

&lt;p&gt;Somehow, the vulnerability magically got patched and they wanted to
know: what&amp;rsquo;s going on?&lt;/p&gt;

&lt;p&gt;The vuln is a pretty serious remote code execution vulnerability in &lt;code&gt;memcached&lt;/code&gt;,
and as far as we could tell our user was indeed using the most recent version available for their
distribution &amp;mdash; &lt;code&gt;1.4.25-2ubuntu2.1&lt;/code&gt;. This version was released on November 3rd, and we could see from our logs that
&lt;code&gt;memcached&lt;/code&gt; got upgraded that same day.&lt;/p&gt;

&lt;p&gt;How did it happen without them knowing about it? The only thing unique about
their configuration was that they&amp;rsquo;re running the recently released Ubuntu 16.10 (Yakkety
Yak)&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;We dug around, and set up some test Yakkety boxes, and
lo and behold: unattended upgrades is automatically enabled by default!&lt;/p&gt;

&lt;p&gt;For those of you who are unaware, &lt;code&gt;unattended-upgrades&lt;/code&gt; is a debian/ubuntu package that, well, does what it says on the
tin: it automatically upgrades your packages. The most common configuration, and the one enabled in 16.10, is to upgrade any packages that have a published security patch. Unattended upgrades does this by checking and installing any
updates from the &lt;code&gt;${distro_codename}-security&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;Ubuntu/debian has had this for years, but it simply was never turned on by
default. After a year of many
&lt;a href="https://blog.appcanary.com/2016/vikhal-symantec.html"&gt;security&lt;/a&gt;
&lt;a href="https://blog.appcanary.com/2016/mirai-botnet-security-broken.html"&gt;fails&lt;/a&gt;, this
news warmed the cockles of my heart and gave me hope for our future! And what&amp;rsquo;s
even amazing is that they turned it on without any fanfare. &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the quiet,
simple changes that provide the biggest wins.&lt;/p&gt;

&lt;p&gt;Of course, there are reasons why administrators don&amp;rsquo;t always want software to be upgraded without
their input. And if it does get updated, there are good reasons for knowing exactly what vulnerabilities are being patched when.
&lt;a href="https://appcanary.com/?utm_source=blog&amp;amp;utm_medium=web&amp;amp;utm_campaign=unattended"&gt;Appcanary&lt;/a&gt; exists in order to allow you to be notified
about security updates without automatically installing them, and to have
insight into what&amp;rsquo;s going being installed if you are patching automatically.&lt;/p&gt;

&lt;p&gt;But if you don&amp;rsquo;t have the capacity to actively manage the packages on your
linux systems (and even if you do!), we implore you: set up &lt;code&gt;unattended-upgrades&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Ubuntu enabling this by default is a great sign for the future.&lt;/p&gt;

&lt;h2 id="not-running-ubuntu-16-10"&gt;Not running Ubuntu 16.10?&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s how to turn on unattended upgrades&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ansible: &lt;a href="https://galaxy.ansible.com/jnv/unattended-upgrades/"&gt;jnv.unattended-upgrades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Puppet: &lt;a href="https://forge.puppet.com/puppet/unattended_upgrades"&gt;puppet/unattended_upgrades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chef: &lt;a href="https://supermarket.chef.io/cookbooks/apt"&gt;apt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&amp;rsquo;re using the server interactively: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install unattended-upgrades &amp;amp;&amp;amp; sudo dpkg-reconfigure unattended-upgrades&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set up manually: &lt;code&gt;sudo apt-get install unattended-upgrades&lt;/code&gt; and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;code&gt;/etc/apt/apt.conf.d/20auto-upgrades&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;code&gt;/etc/apt/apt.conf.d/50unattended-upgrades&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Automatically upgrade packages from these (origin, archive) pairs
Unattended-Upgrade::Allowed-Origins {    
// ${distro_id} and ${distro_codename} will be automatically expanded
    "${distro_id} ${distro_codename}-security";
};

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you 
// have a working mail setup on your system. The package 'mailx'
// must be installed or anything that provides /usr/bin/mail.
//Unattended-Upgrade::Mail "root@localhost";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
//Unattended-Upgrade::Remove-Unused-Dependencies "false";

// Automatically reboot *WITHOUT CONFIRMATION* if a 
// the file /var/run/reboot-required is found after the upgrade 
//Unattended-Upgrade::Automatic-Reboot "false";
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;16.10 is not a Long Term Support release. Regular Ubuntu releases
are supported for 9 months, while April releases on even years (i.e. 14.04,
16.04, etc&amp;hellip;) are designated LTS, and are supported for 5 years. It&amp;rsquo;s thus
more common to see 12.04, 14.04, and 16.04 in use on servers over other
Ubuntu releases. This particular user has a good reason for running 16.10.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <category term="Clojure"/>
    <category term="Programming"/>
    <category term="Ruby"/>
  </entry>
</feed>
